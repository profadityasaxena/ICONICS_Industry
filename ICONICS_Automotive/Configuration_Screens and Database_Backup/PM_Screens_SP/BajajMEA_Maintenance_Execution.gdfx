<?xml version="1.0" encoding="utf-8"?>
<Canvas Background="#FF243782" Width="1100" Height="728" gwx:GwxProperties.Description="Display Size: H=1100 W:728" gwx:GwxProperties.ShowDescriptionInToolTip="False" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:gwx="clr-namespace:Ico.Gwx;assembly=GwxRuntimeCore" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:iwm="clr-namespace:Ico.Windows.Media;assembly=IcoWPF" xmlns:script="clr-namespace:Ico.Script;assembly=IcoScriptEngine" xmlns:ic="clr-namespace:Ico.Collections;assembly=IcoCollections" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:ig="clr-namespace:Ico.Gdx;assembly=GdxViewControl" xmlns:iws="clr-namespace:Ico.WPF.Specialized;assembly=IcoWPFSpecialized" xmlns:ig13="clr-namespace:Ico.Gdx;assembly=GdxClientCommon" xmlns:igd="clr-namespace:Ico.Gdx.Data;assembly=GdxClientCommon" xmlns:iwc="clr-namespace:Ico.Windows.Controls;assembly=IcoWPF" xmlns:gwxcmd="clr-namespace:Ico.Gwx;assembly=GwxRuntimeCoreCommands">
  <Canvas.Resources>
    <BitmapImage x:Key="GwxThumbnailImageKey">
      <iwm:BitmapImageInfo.StreamSource>
        <iwm:Base64Stream Data="" />
      </iwm:BitmapImageInfo.StreamSource>
    </BitmapImage>
  </Canvas.Resources>
  <gwx:GwxDocument.GwxDocument>
    <gwx:GwxDocument FileVersion="10.97.020.00" IsScalable="True" MaximumZoom="1" MinimumZoom="1" PanEnabled="False" PreferredStretch="Fill" ScanRate="500">
      <gwx:GwxDocument.ScriptCodeManager>
        <script:ScriptCodeManager>
          <script:ScriptCodeManager.Scripts>
            <script:ScriptCode Name="ThisDisplayCode" Type="JScriptNet">
              <x:XData><![CDATA[function ThisDisplay_AnimationStarted(sender : System.Object, e : System.EventArgs)
{
	        //Clear();
            ThisWindow.FwxClientWrapper.WriteAsync("@rgs64:headerReg.Value","PM Execution")
	
			var stage_name_LB          : Ico.Gwx.GwxLabel = ThisConfiguration.GetObjectByName("stage_name_LB");
			var plant_name_LB          : Ico.Gwx.GwxLabel = ThisConfiguration.GetObjectByName("plant_name_LB");
		    var shop_name_LB           : Ico.Gwx.GwxLabel = ThisConfiguration.GetObjectByName("shop_name_LB");
			var line_name_LB           : Ico.Gwx.GwxLabel = ThisConfiguration.GetObjectByName("line_name_LB");
			//var time_taken_LB          : Ico.Gwx.GwxLabel = ThisConfiguration.GetObjectByName("time_taken_LB");
			var checklist_name_LB      : Ico.Gwx.GwxLabel = ThisConfiguration.GetObjectByName("checklist_name_LB");
			var CompleteButton         : Ico.Gwx.GwxButton = ThisConfiguration.GetObjectByName("COMPLETE");
			var StartButton            : Ico.Gwx.GwxButton = ThisConfiguration.GetObjectByName("START");
			var SaveButton             : Ico.Gwx.GwxButton = ThisConfiguration.GetObjectByName("SAVE");
            var ModifyButton           : Ico.Gwx.GwxButton = ThisConfiguration.GetObjectByName("MODIFY");
			var grid_available         : System.Windows.Controls.TextBox = ThisConfiguration.GetObjectByName("grid_available").ToDependencyObject();
			
			ModifyButton.Visible 			   = false;
			grid_available.Text  			   =    0;
            StartButton.Visible   			   = true;
			SaveButton.Visible     			   = true;		
			stage_name_LB.Visible              = false
	        plant_name_LB.Visible              = false
            shop_name_LB.Visible               = false
	        line_name_LB.Visible               = false
			checklist_name_LB.Visible          = false
			CompleteButton.Visible             = false;
				

						


}

function ThisDisplay_AnimationStopped(sender : System.Object, e : System.EventArgs)
{
		     //Clear();
		

			ThisWindow.FwxClientWrapper.WriteAsync("@rgs64:headerReg.Value","")
			
			var stage_name_LB          : Ico.Gwx.GwxLabel = ThisConfiguration.GetObjectByName("stage_name_LB");
			var plant_name_LB          : Ico.Gwx.GwxLabel = ThisConfiguration.GetObjectByName("plant_name_LB");
		    var shop_name_LB           : Ico.Gwx.GwxLabel = ThisConfiguration.GetObjectByName("shop_name_LB");
			var line_name_LB           : Ico.Gwx.GwxLabel = ThisConfiguration.GetObjectByName("line_name_LB");
			//var time_taken_LB          : Ico.Gwx.GwxLabel = ThisConfiguration.GetObjectByName("time_taken_LB");
			var checklist_name_LB      : Ico.Gwx.GwxLabel = ThisConfiguration.GetObjectByName("checklist_name_LB");
			var CompleteButton         : Ico.Gwx.GwxButton = ThisConfiguration.GetObjectByName("COMPLETE");
			var StartButton            : Ico.Gwx.GwxButton = ThisConfiguration.GetObjectByName("START");
			var SaveButton             : Ico.Gwx.GwxButton = ThisConfiguration.GetObjectByName("SAVE");
            var ModifyButton           : Ico.Gwx.GwxButton = ThisConfiguration.GetObjectByName("MODIFY");
			var grid_available         : System.Windows.Controls.TextBox = ThisConfiguration.GetObjectByName("grid_available").ToDependencyObject();
			
			ModifyButton.Visible 			   = false;
			grid_available.Text  			   =    0;
            StartButton.Visible   			   = true;
			SaveButton.Visible     			   = true;		
			stage_name_LB.Visible              = false
	        plant_name_LB.Visible              = false
            shop_name_LB.Visible               = false
	        line_name_LB.Visible               = false
			checklist_name_LB.Visible          = false
			//time_taken_LB.Visible              = false
			CompleteButton.Visible             = false;
		

}








function SaveCheckPoint(sender : System.Object, cmdArgs : Ico.Gwx.CommandExecutionEventArgs)
{
}
]]></x:XData>
            </script:ScriptCode>
            <script:ScriptCode Name="CheckListStart" Type="JScriptNet">
              <x:XData><![CDATA[function CheckListStart(sender : System.Object, cmdArgs : Ico.Gwx.CommandExecutionEventArgs)
{
	//Object Declarations
	var checkpoint_name : System.Windows.Controls.TextBox	= ThisConfiguration.GetObjectByName("checkpoint_name").ToDependencyObject();
    var checklist_name    : System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("checklist_name").ToDependencyObject();
	
	var connection_string : String = "Data Source="+DB_SERVER+"; Initial Catalog="+DB_NAME+"; Password="+DB_PASSWORD+"; User ID="+DB_USERID+";";
		// [Inline Test Statement] : Prints out connection_string : MessageBox.Show(connection_string);
		// [Opening connection with the database]
		var connection : System.Data.SqlClient.SqlConnection;
		connection = new System.Data.SqlClient.SqlConnection(connection_string);
		
	try
	{
		connection.Open();
		var FetchFirstCheckPointCMD : System.Data.SqlClient.SqlCommand = new System.Data.SqlClient.SqlCommand("select top(1) checkpoint_name from Maintenance_Checkpoint where checklist_id = (select checklist_id from [Maintenance_Checklist] where [checklist_name]  ='"+checklist_name.Text+"')  order by checkpoint_id",connection);
		checkpoint_name.Text = FetchFirstCheckPointCMD.ExecuteScalar();
		connection.Close();
	}
	catch(ex : Exception)
	{
		MessageBox.Show(ex.Message);
	}
}]]></x:XData>
            </script:ScriptCode>
            <script:ScriptCode Name="CLEAR" Type="JScriptNet">
              <x:XData><![CDATA[function Clear(sender : System.Object, cmdArgs : Ico.Gwx.CommandExecutionEventArgs){		
	
	// [Variable Declaration] Creating holder variables that will hold the user input values in the script
	var stage_name    	: System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("stage_name").ToDependencyObject();
	var plant_name    	: System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("plant_name").ToDependencyObject();
	var shop_name       : System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("shop_name").ToDependencyObject();
	var line_name       : System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("line_name").ToDependencyObject();
    var checkpoint_name : System.Windows.Controls.TextBox	= ThisConfiguration.GetObjectByName("checkpoint_name").ToDependencyObject();
    var checklist_name    : System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("checklist_name").ToDependencyObject();
    var actual_value    : System.Windows.Controls.TextBox	= ThisConfiguration.GetObjectByName("actual_value").ToDependencyObject();
    var time_taken      : System.Windows.Controls.TextBox	= ThisConfiguration.GetObjectByName("time_taken").ToDependencyObject();
    var remarks         : System.Windows.Controls.TextBox	= ThisConfiguration.GetObjectByName("remarks").ToDependencyObject();
    var checkpoint_status    : System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("checkpoint_status").ToDependencyObject();
    
    


		
	// [Array Reset] Collection arrays are reset here to default values
	stage_name.Items.Clear();
	plant_name.Items.Clear();
	shop_name.Items.Clear();
	line_name.Items.Clear();
	checklist_name.Items.Clear();
	checkpoint_status.Items.Clear();
				
	//[Variable Reset] Variables are reset here to default values
	stage_name.SelectedIndex 	= 0;
	plant_name.SelectedIndex = 0;
	shop_name.SelectedIndex = 0;
    line_name.SelectedIndex = 0;
    checklist_name.SelectedIndex  = 0;
    checkpoint_status.SelectedIndex  = 0;
   	checkpoint_name.Clear();
    actual_value.Clear();
    time_taken.Clear();
    remarks.Clear();

		
		
	//[Inline Test Statemnt] MessageBox.Show('Clearing all fields');
}]]></x:XData>
            </script:ScriptCode>
            <script:ScriptCode Name="Complete" Type="JScriptNet">
              <x:XData><![CDATA[function Complete(sender : System.Object, cmdArgs : Ico.Gwx.CommandExecutionEventArgs){
			
			var ModifyButton           : Ico.Gwx.GwxButton = ThisConfiguration.GetObjectByName("MODIFY");
			var grid_available         : System.Windows.Controls.TextBox = ThisConfiguration.GetObjectByName("grid_available").ToDependencyObject();
			ModifyButton.Visible   =   false;			grid_available.Text = 0;
			
			var connection_string : String = "Data Source="+DB_SERVER+"; Initial Catalog="+DB_NAME+"; Password="+DB_PASSWORD+"; User ID="+DB_USERID+";";
			// [Inline Test Statement] : Prints out connection_string : MessageBox.Show(connection_string);
			
			// [Opening connection with the database]
			var connection : System.Data.SqlClient.SqlConnection;
			connection = new System.Data.SqlClient.SqlConnection(connection_string);
			
			connection.Open();
			
			// [Opening SQL Data Reader]
		
			
				// [Operation Specification] Specifying the kind of operation that happens on pressing the button 
				var ActionOp = 'Complete';
				
				// [Variable Declaration] Creating holder variables that will hold the user input values in the script
			    var stage_name    	: System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("stage_name").ToDependencyObject();
				var plant_name    	: System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("plant_name").ToDependencyObject();
				var shop_name       : System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("shop_name").ToDependencyObject();
				var line_name       : System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("line_name").ToDependencyObject();
			    var checkpoint_name : System.Windows.Controls.TextBox	= ThisConfiguration.GetObjectByName("checkpoint_name").ToDependencyObject();
			    var checklist_name    : System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("checklist_name").ToDependencyObject();
			    var actual_value    : System.Windows.Controls.TextBox	= ThisConfiguration.GetObjectByName("actual_value").ToDependencyObject();
			    var time_taken      : System.Windows.Controls.TextBox	= ThisConfiguration.GetObjectByName("time_taken").ToDependencyObject();
			    var remarks         : System.Windows.Controls.TextBox	= ThisConfiguration.GetObjectByName("remarks").ToDependencyObject();
			    var checkpoint_status    : System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("checkpoint_status").ToDependencyObject();
				var stage_name_LB          : Ico.Gwx.GwxLabel = ThisConfiguration.GetObjectByName("stage_name_LB");
				var plant_name_LB          : Ico.Gwx.GwxLabel = ThisConfiguration.GetObjectByName("plant_name_LB");
			    var shop_name_LB           : Ico.Gwx.GwxLabel = ThisConfiguration.GetObjectByName("shop_name_LB");
				var line_name_LB           : Ico.Gwx.GwxLabel = ThisConfiguration.GetObjectByName("line_name_LB");
				//var time_taken_LB          : Ico.Gwx.GwxLabel = ThisConfiguration.GetObjectByName("time_taken_LB");
				var checklist_id_LB        : Ico.Gwx.GwxLabel = ThisConfiguration.GetObjectByName("checklist_id_LB");
				
 
	           
				
				var CurrentUser : System.Windows.Controls.TextBox = ThisConfiguration.GetObjectByName("CurrentUser").ToDependencyObject();
				var completed_by 		= CurrentUser.Text;
			
	
		
			
			//[Error & Exception Handling] Creating a variable for error and exception handling
			var response		: String;
			response="";
			

			
			// [Query String] Building Query for calling stored procedure
			var query_string1 : String = "[dbo].[SP_Maintenance_Execution_CompleteDate]";
			var query_string2 : String = "[SP_Maintenance_Execution_Complete]";
		    //[Inline Test Statement]
			 //MessageBox.Show(query_string1);
			//[Inline Test Statement] MessageBox.Show(query_string2);
			query_string1 = "[dbo].[SP_Maintenance_Execution_CompleteDate]'"+checklist_name.Text+"'";
			query_string2 = "[SP_Maintenance_Execution_Complete] '"+checklist_name.Text+"','"+completed_by+"'";
			

			// [Validation Statement] This if-else statement checks if any of the fields have been left empty
							
			// [Validation Statement] This if-else statement checks if any of the fields have been left empty
			if ( checklist_name.Text == "" ){
					//MessageBox.Show("Please fill in all the required values!")
					
				if(stage_name.Text == "")
				{stage_name_LB.Visible = true}
				else
				{stage_name_LB.Visible = false}
				
				if(plant_name.Text == "")
				{plant_name_LB.Visible = true}
				else
				{plant_name_LB.Visible = false}
				
				if(shop_name.Text == "")
				{shop_name_LB.Visible = true}
				else					
				{shop_name_LB.Visible = false}
				
				if(line_name.Text == "")
				{line_name_LB.Visible = true}
				else					
				{line_name_LB.Visible = false}

							
				if(checklist_name.Text == "")
				{checklist_name_LB.Visible = true}
				else
				{checklist_name_LB.Visible = false}
				
							
							


			



				
				} else {
					// [Inline Test Statement] MessageBox.Show("Thank you for filling all the required values");
					try {
						var reader1 : System.Data.SqlClient.SqlDataReader;
						var reader2 : System.Data.SqlClient.SqlDataReader;	
						//[Inline Test Statement] 
						//MessageBox.Show(query_string1);
						//[Inline Test Statement] 
						//MessageBox.Show(query_string2);
						
						var stored_procedure_query1 : System.Data.SqlClient.SqlCommand = new System.Data.SqlClient.SqlCommand(query_string1, connection);
						var stored_procedure_query2 : System.Data.SqlClient.SqlCommand = new System.Data.SqlClient.SqlCommand(query_string2, connection);					
						reader1 = stored_procedure_query1.ExecuteReader();
																		
						while(reader1.Read())
						{
							response = reader1["Response"];
							//MessageBox.Show(response);
						}
						reader1.Close();
						
						reader2 = stored_procedure_query2.ExecuteReader();

						while(reader2.Read())
						{
							response = reader2["Response"];
							
						}
						reader2.Close();
						Clear();
					MessageBox.Show("Completed Successfully!");
					}
					
				catch(ex : Exception){
						MessageBox.Show (ex.Message);	
					}	
				}			
								
		// [Closing connection with the database]
		
		
		connection.Close();
		
	}]]></x:XData>
            </script:ScriptCode>
            <script:ScriptCode Name="Database_Connection" Type="JScriptNet">
              <x:XData><![CDATA[
/*
const DB_SERVER               : String = "MSI\\SQLEXPRESS2017";
const DB_NAME                 : String = "BajajMEA";
const DB_USERID               : String = "ks";
const DB_PASSWORD             : String = "8101";
var DB_CONNECT_AUTHENTICATION : String = ";User ID="+DB_USERID+";Password="+DB_PASSWORD+";";
*/
//[Windows Based Authentication] User is authenticated to the SQL Server based on Windows IAM

const DB_SERVER               : String = "AK-WKS-0476-LS\\SQLEXPRESS2017";
const DB_NAME                 : String = "BajajMEA";
const DB_USERID               : String = "sa";
const DB_PASSWORD             : String = "sql_1234";
var DB_CONNECT_AUTHENTICATION : String = ";User ID="+DB_USERID+";Password="+DB_PASSWORD+";";

]]></x:XData>
            </script:ScriptCode>
            <script:ScriptCode Name="Dropdown_Checklist_Name" Type="JScriptNet">
              <x:XData><![CDATA[function Dropdown_Checklist_Name(sender : System.Object, e : System.EventArgs)
{
		var connection_string : String = "Data Source="+DB_SERVER+"; Initial Catalog="+DB_NAME+"; Password="+DB_PASSWORD+"; User ID="+DB_USERID+";";
		// [Inline Test Statement] : Prints out connection_string : MessageBox.Show(connection_string);
		// [Opening connection with the database]
		var connection : System.Data.SqlClient.SqlConnection;
		connection = new System.Data.SqlClient.SqlConnection(connection_string);
		connection.Open();

		// [Variable Declaration] Creating holder variables that will hold the user input values in the script
		var stage_name    	: System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("stage_name").ToDependencyObject();
		var plant_name    	: System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("plant_name").ToDependencyObject();
		var shop_name       : System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("shop_name").ToDependencyObject();
		var checklist_name       : System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("checklist_name").ToDependencyObject();
		var checkpoint_name       : System.Windows.Controls.TextBox	= ThisConfiguration.GetObjectByName("checkpoint_name").ToDependencyObject();

			   
		
		var checklist_name_LB  : Ico.Gwx.GwxLabel                  = ThisConfiguration.GetObjectByName("checklist_name_LB");
        checklist_name_LB.Visible    = false;

		
		// [Array Reset] Collection arrays are reset here to default values
		checklist_name.Items.Clear();
		checkpoint_name.Clear();

		// [Setting Index] Setting Index to Zero
		checklist_name.SelectedIndex           = 0;
	
		
		if(stage_name.Text!=""){
			
			var DataReader : System.Data.SqlClient.SqlDataReader;
			var RetrieveDataCmd: System.Data.SqlClient.SqlCommand = new System.Data.SqlClient.SqlCommand("SELECT distinct [checklist_name] from Maintenance_Checklist WHERE [stage_id] IN (select [stage_id] from Config_Stage where [stage_name] = '"+stage_name.Text+"')", connection);
			
			try {
				DataReader=RetrieveDataCmd.ExecuteReader();
				
				while(DataReader.Read()) {
					checklist_name.Items.Add(DataReader["checklist_name"]);
				}
				DataReader.Close();
				connection.Close();
				
				} catch(ex:Exception){
					MessageBox.Show(ex);
				}
			}
	else{
			MessageBox.Show("You must select stage first");
		}

}]]></x:XData>
            </script:ScriptCode>
            <script:ScriptCode Name="Dropdown_Checkpoint_Status" Type="JScriptNet">
              <x:XData><![CDATA[function Dropdown_Checkpoint_Status(sender : System.Object, e : System.EventArgs)
{
	
		// [Variable Declaration] Creating holder variables that will hold the user input values in the script
	    var checkpoint_status       : System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("checkpoint_status").ToDependencyObject();
			   
		
		
		// [Array Reset] Collection arrays are reset here to default values
		checkpoint_status.Items.Clear();

		// [Setting Index] Setting Index to Zero
		checkpoint_status.SelectedIndex           = 0;
		
		checkpoint_status.Items.Add('Ok');
		checkpoint_status.Items.Add('Not Ok');
		
		
		
}]]></x:XData>
            </script:ScriptCode>
            <script:ScriptCode Name="Dropdown_Line_Name" Type="JScriptNet">
              <x:XData><![CDATA[function Dropdown_Line_Name(sender : System.Object, e : System.EventArgs)
{
		var connection_string : String = "Data Source="+DB_SERVER+"; Initial Catalog="+DB_NAME+"; Password="+DB_PASSWORD+"; User ID="+DB_USERID+";";
		// [Inline Test Statement] : Prints out connection_string : MessageBox.Show(connection_string);
		// [Opening connection with the database]
		var connection : System.Data.SqlClient.SqlConnection;
		connection = new System.Data.SqlClient.SqlConnection(connection_string);
		connection.Open();

		// [Variable Declaration] Creating holder variables that will hold the user input values in the script
		var stage_name    	: System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("stage_name").ToDependencyObject();
				var plant_name    	: System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("plant_name").ToDependencyObject();
				var shop_name       : System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("shop_name").ToDependencyObject();
				var line_name       : System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("line_name").ToDependencyObject();
				var checklist_name       : System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("checklist_name").ToDependencyObject();

			   
		
		var line_name_LB  : Ico.Gwx.GwxLabel                  = ThisConfiguration.GetObjectByName("line_name_LB");
        line_name_LB.Visible    = false;

		
		// [Array Reset] Collection arrays are reset here to default values
		line_name.Items.Clear();
		stage_name.Items.Clear();
		checklist_name.Items.Clear();

		// [Setting Index] Setting Index to Zero
		line_name.SelectedIndex            = 0;
		stage_name.SelectedIndex           = 0;
		checklist_name.SelectedIndex       = 0;
		
		if(shop_name.Text!=""){
			
			var DataReader : System.Data.SqlClient.SqlDataReader;
			var RetrieveDataCmd: System.Data.SqlClient.SqlCommand = new System.Data.SqlClient.SqlCommand("SELECT distinct line_name from Config_Line WHERE shop_name = '"+shop_name.Text+"'", connection);
			
			try {
				DataReader=RetrieveDataCmd.ExecuteReader();
				
				while(DataReader.Read()) {
					line_name.Items.Add(DataReader["line_name"]);
				}
				DataReader.Close();
				connection.Close();
				
				} catch(ex:Exception){
					MessageBox.Show(ex);
				}
			}
	else{
			MessageBox.Show("You must select shop first");
		}

}]]></x:XData>
            </script:ScriptCode>
            <script:ScriptCode Name="Dropdown_Plant_Name" Type="JScriptNet">
              <x:XData><![CDATA[function Dropdown_Plant_Name(sender : System.Object, e : System.EventArgs)
{
		var connection_string : String = "Data Source="+DB_SERVER+"; Initial Catalog="+DB_NAME+"; Password="+DB_PASSWORD+"; User ID="+DB_USERID+";";
		// [Inline Test Statement] : Prints out connection_string : MessageBox.Show(connection_string);
		// [Opening connection with the database]
		var connection : System.Data.SqlClient.SqlConnection;
		connection = new System.Data.SqlClient.SqlConnection(connection_string);
		connection.Open();

		// [Variable Declaration] Creating holder variables that will hold the user input values in the script
		var plant_name    	: System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("plant_name").ToDependencyObject();
        var shop_name     : System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("shop_name").ToDependencyObject();
        var line_name       : System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("line_name").ToDependencyObject();
		var checklist_name       : System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("checklist_name").ToDependencyObject();
        var stage_name    	: System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("stage_name").ToDependencyObject();

			   		
		var plant_name_LB  : Ico.Gwx.GwxLabel                  = ThisConfiguration.GetObjectByName("plant_name_LB");
        plant_name_LB.Visible    = false;

		
		// [Array Reset] Collection arrays are reset here to default values
		plant_name.Items.Clear();
        shop_name.Items.Clear();
        line_name.Items.Clear();
		stage_name.Items.Clear();
		checklist_name.Items.Clear();

		// [Setting Index] Setting Index to Zero
		plant_name.SelectedIndex           = 0;
		shop_name.SelectedIndex           = 0;
		line_name.SelectedIndex            = 0;
		stage_name.SelectedIndex           = 0;
		checklist_name.SelectedIndex       = 0;



			
			var DataReader : System.Data.SqlClient.SqlDataReader;
			var RetrieveDataCmd: System.Data.SqlClient.SqlCommand = new System.Data.SqlClient.SqlCommand("SELECT DISTINCT [plant_name] from Config_Plant ", connection);
			
			try {
				DataReader=RetrieveDataCmd.ExecuteReader();
				
				while(DataReader.Read()) {
					plant_name.Items.Add(DataReader["plant_name"]);
				}
				DataReader.Close();
				connection.Close();
				
				} catch(ex:Exception){
					MessageBox.Show(ex);
				}
			
}]]></x:XData>
            </script:ScriptCode>
            <script:ScriptCode Name="Dropdown_Shop_Name" Type="JScriptNet">
              <x:XData><![CDATA[function Dropdown_Shop_Name(sender : System.Object, e : System.EventArgs)
{
		var connection_string : String = "Data Source="+DB_SERVER+"; Initial Catalog="+DB_NAME+"; Password="+DB_PASSWORD+"; User ID="+DB_USERID+";";
		// [Inline Test Statement] : Prints out connection_string : MessageBox.Show(connection_string);
		// [Opening connection with the database]
		var connection : System.Data.SqlClient.SqlConnection;
		connection = new System.Data.SqlClient.SqlConnection(connection_string);
		connection.Open();

		// [Variable Declaration] Creating holder variables that will hold the user input values in the script
		var shop_name     : System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("shop_name").ToDependencyObject();
		var plant_name     : System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("plant_name").ToDependencyObject();
        var line_name       : System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("line_name").ToDependencyObject();
		var checklist_name       : System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("checklist_name").ToDependencyObject();
        var stage_name    	: System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("stage_name").ToDependencyObject();

							    		
		var shop_name_LB  : Ico.Gwx.GwxLabel                  = ThisConfiguration.GetObjectByName("shop_name_LB");
        shop_name_LB.Visible    = false;

		
		// [Array Reset] Collection arrays are reset here to default values
		shop_name.Items.Clear();
        line_name.Items.Clear();
		stage_name.Items.Clear();
		checklist_name.Items.Clear();

		// [Setting Index] Setting Index to Zero
		shop_name.SelectedIndex           = 0;
		line_name.SelectedIndex            = 0;
		stage_name.SelectedIndex           = 0;
		checklist_name.SelectedIndex       = 0;

		if(plant_name.Text!=""){
			
			var DataReader : System.Data.SqlClient.SqlDataReader;
			var RetrieveDataCmd: System.Data.SqlClient.SqlCommand = new System.Data.SqlClient.SqlCommand("SELECT distinct shop_name from Config_Shop WHERE plant_name = '"+plant_name.Text+"'",connection);
			
			try {
				DataReader=RetrieveDataCmd.ExecuteReader();
				
				while(DataReader.Read()) {
					shop_name.Items.Add(DataReader["shop_name"]);
				}
				DataReader.Close();
				connection.Close();
				
				} catch(ex:Exception){
					MessageBox.Show(ex);
				}
			}
	else{
			MessageBox.Show("You must select a plant first");
		}

}]]></x:XData>
            </script:ScriptCode>
            <script:ScriptCode Name="Dropdown_Stage_Name" Type="JScriptNet">
              <x:XData><![CDATA[function Dropdown_Stage_Name(sender : System.Object, e : System.EventArgs)
{
		var connection_string : String = "Data Source="+DB_SERVER+"; Initial Catalog="+DB_NAME+"; Password="+DB_PASSWORD+"; User ID="+DB_USERID+";";
		// [Inline Test Statement] : Prints out connection_string : MessageBox.Show(connection_string);
		// [Opening connection with the database]
		var connection : System.Data.SqlClient.SqlConnection;
		connection = new System.Data.SqlClient.SqlConnection(connection_string);
		connection.Open();

		// [Variable Declaration] Creating holder variables that will hold the user input values in the script
		   var stage_name    	: System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("stage_name").ToDependencyObject();
			var line_name       : System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("line_name").ToDependencyObject();
		    var checklist_name       : System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("checklist_name").ToDependencyObject();

		var stage_name_LB  : Ico.Gwx.GwxLabel                  = ThisConfiguration.GetObjectByName("stage_name_LB");
        stage_name_LB.Visible    = false;

		
		// [Array Reset] Collection arrays are reset here to default values
		stage_name.Items.Clear();
        checklist_name.Items.Clear();


		// [Setting Index] Setting Index to Zero
		stage_name.SelectedIndex           = 0;
		checklist_name.SelectedIndex       = 0;
		
	   if(line_name.Text!=""){	
			var DataReader : System.Data.SqlClient.SqlDataReader;
			var RetrieveDataCmd: System.Data.SqlClient.SqlCommand = new System.Data.SqlClient.SqlCommand("SELECT distinct stage_name from Config_Stage WHERE line_id IN (Select line_id from Config_Line WHERE line_name = '"+line_name.Text+"');", connection);
			
			try {
				DataReader=RetrieveDataCmd.ExecuteReader();
				
				while(DataReader.Read()) {
					stage_name.Items.Add(DataReader["stage_name"]);
				}
				DataReader.Close();
				connection.Close();
				
				} catch(ex:Exception){
					MessageBox.Show(ex);
				}
			}
	else{
			MessageBox.Show("You must select Line first");
		}

	
}]]></x:XData>
            </script:ScriptCode>
            <script:ScriptCode Name="Grid" Type="JScriptNet">
              <x:XData><![CDATA[function Grid(sender : System.Object, cmdArgs : Ico.Gwx.CommandExecutionEventArgs)
{
    var grid_available         : System.Windows.Controls.TextBox = ThisConfiguration.GetObjectByName("grid_available").ToDependencyObject();

    // [Variable Declaration] Creating holder variables that will hold the user input values in the script
    var stage_name     : System.Windows.Controls.ComboBox = ThisConfiguration.GetObjectByName("stage_name").ToDependencyObject();
    var plant_name     : System.Windows.Controls.ComboBox = ThisConfiguration.GetObjectByName("plant_name").ToDependencyObject();
    var shop_name       : System.Windows.Controls.ComboBox = ThisConfiguration.GetObjectByName("shop_name").ToDependencyObject();
    var line_name       : System.Windows.Controls.ComboBox = ThisConfiguration.GetObjectByName("line_name").ToDependencyObject();
    var checkpoint_name : System.Windows.Controls.TextBox = ThisConfiguration.GetObjectByName("checkpoint_name").ToDependencyObject();
    var checklist_name    : System.Windows.Controls.ComboBox = ThisConfiguration.GetObjectByName("checklist_name").ToDependencyObject();
    var actual_value    : System.Windows.Controls.TextBox = ThisConfiguration.GetObjectByName("actual_value").ToDependencyObject();
    var time_taken      : System.Windows.Controls.TextBox = ThisConfiguration.GetObjectByName("time_taken").ToDependencyObject();
    var remarks         : System.Windows.Controls.TextBox = ThisConfiguration.GetObjectByName("remarks").ToDependencyObject();

    var checkpoint_status    : System.Windows.Controls.ComboBox = ThisConfiguration.GetObjectByName("checkpoint_status").ToDependencyObject();
    var CompleteButton : Ico.Gwx.GwxButton = ThisConfiguration.GetObjectByName("COMPLETE");

    if(grid_available.Text == 1){
        //[Grid Selection Code]
        var gdxViewer : Ico.Gdx.GdxViewControl = Ico.Gdx.GdxViewControl(ThisConfiguration.GetObjectByName("default_grid").ToDependencyObject());
        var tab_list : ItemsControl = ItemsControl(gdxViewer.Items[0]);
        var grid_list : Ico.Gdx.GdxGridView = Ico.Gdx.GdxGridView(tab_list.Items[0]);
        var Row_Selected : DataRow;
        Row_Selected = grid_list.GetHighlightedRow();

        if(grid_list.GetHighlightedRow() != null)
        {
            if (Row_Selected.Item[0] != String.IsNullOrEmpty){

                Dropdown_Plant_Name();
                plant_name.SelectedValue = Row_Selected.Item[1];

                Dropdown_Shop_Name();
                shop_name.SelectedValue = Row_Selected.Item[2];

                Dropdown_Line_Name();
                line_name.SelectedValue = Row_Selected.Item[4];

                Dropdown_Stage_Name();
                stage_name.SelectedValue = Row_Selected.Item[6];

                Dropdown_Checklist_Name();
                checklist_name.SelectedValue = Row_Selected.Item[8];

                Dropdown_Checkpoint_Status();
                checkpoint_status.SelectedValue = Row_Selected.Item[11];

                time_taken.Text = Row_Selected.Item[12];
                remarks.Text = Row_Selected.Item[13];
                actual_value.Text = Row_Selected.Item[10];

                checkpoint_name.Text = Row_Selected.Item[9];
            }
        }
    }
}]]></x:XData>
            </script:ScriptCode>
            <script:ScriptCode Name="JScriptDotNetGlobalVariablesCode" Type="JScriptNet" EditorBrowsable="Never">
              <x:XData><![CDATA[
var ThisWindow : Ico.Gwx.GwxRuntimeViewControl;
var ThisDocument : Ico.Gwx.GwxDocument;
var ThisConfiguration : Ico.Gwx.GwxConfiguration;
]]></x:XData>
            </script:ScriptCode>
            <script:ScriptCode Name="MODIFY1" Type="JScriptNet">
              <x:XData><![CDATA[function Update(sender : System.Object, cmdArgs : Ico.Gwx.CommandExecutionEventArgs){
			
			//Object Declarations
			// [Variable Declaration] Creating holder variables that will hold the user input values in the script
			    var stage_name    	: System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("stage_name").ToDependencyObject();
				var plant_name    	: System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("plant_name").ToDependencyObject();
				var shop_name       : System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("shop_name").ToDependencyObject();
				var line_name       : System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("line_name").ToDependencyObject();
			    var checkpoint_name : System.Windows.Controls.TextBox	= ThisConfiguration.GetObjectByName("checkpoint_name").ToDependencyObject();
			    var checklist_name    : System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("checklist_name").ToDependencyObject();
			    var actual_value    : System.Windows.Controls.TextBox	= ThisConfiguration.GetObjectByName("actual_value").ToDependencyObject();
			    var time_taken      : System.Windows.Controls.TextBox	= ThisConfiguration.GetObjectByName("time_taken").ToDependencyObject();
			    var remarks         : System.Windows.Controls.TextBox	= ThisConfiguration.GetObjectByName("remarks").ToDependencyObject();
			    var checkpoint_status      : System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("checkpoint_status").ToDependencyObject();
				var stage_name_LB          : Ico.Gwx.GwxLabel = ThisConfiguration.GetObjectByName("stage_name_LB");
				var plant_name_LB          : Ico.Gwx.GwxLabel = ThisConfiguration.GetObjectByName("plant_name_LB");
			    var shop_name_LB           : Ico.Gwx.GwxLabel = ThisConfiguration.GetObjectByName("shop_name_LB");
				var line_name_LB           : Ico.Gwx.GwxLabel = ThisConfiguration.GetObjectByName("line_name_LB");
				//var time_taken_LB          : Ico.Gwx.GwxLabel = ThisConfiguration.GetObjectByName("time_taken_LB");
				var checklist_name_LB      : Ico.Gwx.GwxLabel = ThisConfiguration.GetObjectByName("checklist_name_LB");
				var CompleteButton 		   : Ico.Gwx.GwxButton = ThisConfiguration.GetObjectByName("COMPLETE");
				var StartButton            : Ico.Gwx.GwxButton = ThisConfiguration.GetObjectByName("START");
				var SaveButton             : Ico.Gwx.GwxButton = ThisConfiguration.GetObjectByName("SAVE");
				var ModifyButton           : Ico.Gwx.GwxButton = ThisConfiguration.GetObjectByName("MODIFY");


				var grid_available         : System.Windows.Controls.TextBox = ThisConfiguration.GetObjectByName("grid_available").ToDependencyObject();

				
			var connection_string : String = "Data Source="+DB_SERVER+"; Initial Catalog="+DB_NAME+"; Password="+DB_PASSWORD+"; User ID="+DB_USERID+";";
			// [Inline Test Statement] : Prints out connection_string : MessageBox.Show(connection_string);
			
			// [Opening connection with the database]
			var connection : System.Data.SqlClient.SqlConnection;
			connection = new System.Data.SqlClient.SqlConnection(connection_string);
			
					
			connection.Open();
			
			// [Opening SQL Data Reader]
			//	var Read : System.Data.SqlClient.SqlDataReader;	
			
				// [Operation Specification] Specifying the kind of operation that happens on pressing the button 
				var ActionOp = 'Update';
				
				
				var CurrentUser     : System.Windows.Controls.TextBox = ThisConfiguration.GetObjectByName("CurrentUser").ToDependencyObject();
				var created_by 		= CurrentUser.Text;
		
		
			
			//[Error & Exception Handling] Creating a variable for error and exception handling
			var response		: String;
			response="";
			
			// [Query String] Building Query for calling stored procedure
			
			var query_string : String = "Exec [dbo].[SP_Maintenance_Execution_Save] ";
			query_string += "@checklist_name		= '"+checklist_name.Text+"',";
			query_string += "@checkpoint_name	    = '"+checkpoint_name.Text+"',";
			query_string += "@actual_value		    = '"+actual_value.Text+"',";
			query_string += "@checkpoint_status	    = '"+checkpoint_status.Text+"',";
			query_string += "@time_taken		    = '"+time_taken.Text+"',";
			query_string += "@remarks       	    = '"+remarks.Text+"',";
			query_string += "@created_by     		= '"+created_by+"',";
			query_string += "@ActionOp 			    = '"+ActionOp+"'";			//[Inline Test Statement] MessageBox.Show(query_string);
					
			// [Validation Statement] This if-else statement checks if any of the fields have been left empty
			if ( checklist_name.Text == "" ){
					//MessageBox.Show("Please fill in all the required values!")
					
				if(stage_name.Text == "")
				{stage_name_LB.Visible = true}
				else
				{stage_name_LB.Visible = false}
				
				if(plant_name.Text == "")
				{plant_name_LB.Visible = true}
				else
				{plant_name_LB.Visible = false}
				
				if(shop_name.Text == "")
				{shop_name_LB.Visible = true}
				else					
				{shop_name_LB.Visible = false}
				
				if(line_name.Text == "")
				{line_name_LB.Visible = true}
				else					
				{line_name_LB.Visible = false}

							
				if(checklist_name.Text == "")
				{checklist_name_LB.Visible = true}
				else
				{checklist_name_LB.Visible = false}
				
				

				
				} else {
					// [Inline Test Statement] MessageBox.Show("Thank you for filling all the required values");
					try {
						var reader : System.Data.SqlClient.SqlDataReader;	
						//[Inline Test Statement] MessageBox.Show(query_string);
						var stored_procedure_query : System.Data.SqlClient.SqlCommand = new System.Data.SqlClient.SqlCommand(query_string, connection);					
						reader = stored_procedure_query.ExecuteReader();
						//Clear();
						checkpoint_status.Items.Clear();
                        checkpoint_status.SelectedIndex  = 0;
						actual_value.Clear();
                        time_taken.Clear();
                        remarks.Clear();

						while(reader.Read())
						{
							response = reader["Response"];
							//MessageBox.Show(response);
						}
						reader.Close();
						
						
						
					}
				catch(ex : Exception){
						MessageBox.Show (ex.Message);	
					}	
				}			
								
		// [Closing connection with the database]
		
		
		connection.Close();
		
		
	}]]></x:XData>
            </script:ScriptCode>
            <script:ScriptCode Name="Save" Type="JScriptNet">
              <x:XData><![CDATA[function Save(sender : System.Object, cmdArgs : Ico.Gwx.CommandExecutionEventArgs){
	// [Variable Declaration] Creating holder variables that will hold the user input values in the script
	var stage_name    			: System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("stage_name").ToDependencyObject();
	var plant_name    			: System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("plant_name").ToDependencyObject();
	var shop_name       		: System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("shop_name").ToDependencyObject();
	var line_name       		: System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("line_name").ToDependencyObject();
	var checkpoint_name 		: System.Windows.Controls.TextBox	= ThisConfiguration.GetObjectByName("checkpoint_name").ToDependencyObject();
	var checklist_name    		: System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("checklist_name").ToDependencyObject();
	var actual_value    		: System.Windows.Controls.TextBox	= ThisConfiguration.GetObjectByName("actual_value").ToDependencyObject();
	var time_taken      		: System.Windows.Controls.TextBox	= ThisConfiguration.GetObjectByName("time_taken").ToDependencyObject();
	var remarks         		: System.Windows.Controls.TextBox	= ThisConfiguration.GetObjectByName("remarks").ToDependencyObject();
	var checkpoint_status      	: System.Windows.Controls.ComboBox	= ThisConfiguration.GetObjectByName("checkpoint_status").ToDependencyObject();
	var stage_name_LB          	: Ico.Gwx.GwxLabel 					= ThisConfiguration.GetObjectByName("stage_name_LB");
	var plant_name_LB          	: Ico.Gwx.GwxLabel 					= ThisConfiguration.GetObjectByName("plant_name_LB");
	var shop_name_LB           	: Ico.Gwx.GwxLabel 					= ThisConfiguration.GetObjectByName("shop_name_LB");
	var line_name_LB           	: Ico.Gwx.GwxLabel 					= ThisConfiguration.GetObjectByName("line_name_LB");
	var time_taken_LB          	: Ico.Gwx.GwxLabel 					= ThisConfiguration.GetObjectByName("time_taken_LB");
	var checklist_name_LB      	: Ico.Gwx.GwxLabel 					= ThisConfiguration.GetObjectByName("checklist_name_LB");
	var CompleteButton 		   	: Ico.Gwx.GwxButton 				= ThisConfiguration.GetObjectByName("COMPLETE");
	var StartButton            	: Ico.Gwx.GwxButton 				= ThisConfiguration.GetObjectByName("START");
	var SaveButton             	: Ico.Gwx.GwxButton 				= ThisConfiguration.GetObjectByName("SAVE");
	var ModifyButton           	: Ico.Gwx.GwxButton 				= ThisConfiguration.GetObjectByName("MODIFY");
	var grid_available         	: System.Windows.Controls.TextBox 	= ThisConfiguration.GetObjectByName("grid_available").ToDependencyObject();
	
	var connection_string : String = "Data Source="+DB_SERVER+"; Initial Catalog="+DB_NAME+"; Password="+DB_PASSWORD+"; User ID="+DB_USERID+";";
	// [Inline Test Statement] : Prints out connection_string : MessageBox.Show(connection_string);
	
	
	// [Opening connection with the database]
	var connection : System.Data.SqlClient.SqlConnection;
	connection = new System.Data.SqlClient.SqlConnection(connection_string);
	
	if(connection.Open){
	  connection.Close();
	}
			
	try {
		connection.Open();
		//Fetch current CheckPointId
		var CurrentCheckPointIDCMD : System.Data.SqlClient.SqlCommand = new System.Data.SqlClient.SqlCommand("select checkpoint_id from Maintenance_Checkpoint where checkpoint_name = '"+checkpoint_name.Text+"' and checklist_id = (select checklist_id from [Maintenance_Checklist] where[checklist_name]  ='"+checklist_name.Text+"')",connection);
		var CurrentCheckPointID = CurrentCheckPointIDCMD.ExecuteScalar();
		//Fetch the next CheckPointName
		var NextCheckPointNameCMD : System.Data.SqlClient.SqlCommand = new System.Data.SqlClient.SqlCommand("select checkpoint_name from Maintenance_Checkpoint where checkpoint_id > "+CurrentCheckPointID+" and checklist_id = (select checklist_id from [Maintenance_Checklist] where[checklist_name]  ='"+checklist_name.Text+"') order by checkpoint_id asc",connection);

		var NextCheckPointName : String;
		NextCheckPointName = NextCheckPointNameCMD.ExecuteScalar();
					
		if (NextCheckPointName == null)
		{	
			// [Making Grid Code Available]
			grid_available.Text  =  1;
			MessageBox.Show("[Notification] All Checkpoints have been saved! Grid Selection is now activated for checklist review.");			
			CompleteButton.Visible = true;
			ModifyButton.Visible   = true;
			StartButton.Visible    = false;
			SaveButton.Visible     = false;
		}
		
		connection.Close();
	} catch(ex : Exception) {
		MessageBox.Show(ex.Message);
	}
	
	if(connection.Open){
	  connection.Close();
	}
	
	connection.Open();
	
	// [Opening SQL Data Reader]
	//	var Read : System.Data.SqlClient.SqlDataReader;	
	
	// [Operation Specification] Specifying the kind of operation that happens on pressing the button 
	var ActionOp = 'Save';
	
	var CurrentUser     : System.Windows.Controls.TextBox = ThisConfiguration.GetObjectByName("CurrentUser").ToDependencyObject();
	var created_by 		= CurrentUser.Text;
				
	//[Error & Exception Handling] Creating a variable for error and exception handling
	var response		: String;
	response			= "";
	
	// [Query String] Building Query for calling stored procedure
	
	var query_string : String = "Exec [dbo].[SP_Maintenance_Execution_Save] ";
	query_string += "@checklist_name		= '"+checklist_name.Text+"',";
	query_string += "@checkpoint_name	    = '"+checkpoint_name.Text+"',";
	query_string += "@actual_value		    = '"+actual_value.Text+"',";
	query_string += "@checkpoint_status	    = '"+checkpoint_status.Text+"',";
	query_string += "@time_taken		    = '"+time_taken.Text+"',";
	query_string += "@remarks       	    = '"+remarks.Text+"',";
	query_string += "@created_by     		= '"+created_by+"',";
	query_string += "@ActionOp 			    = '"+ActionOp+"'";			
	
	//[Inline Test Statement] MessageBox.Show(query_string);
			
	// [Validation Statement] This if-else statement checks if any of the fields have been left empty
	if ( checklist_name.Text == "" ){
		//MessageBox.Show("Please fill in all the required values!")
		if(stage_name.Text == "")
		{stage_name_LB.Visible = true}
		else
		{stage_name_LB.Visible = false}
		
		if(plant_name.Text == "")
		{plant_name_LB.Visible = true}
		else
		{plant_name_LB.Visible = false}
		
		if(shop_name.Text == "")
		{shop_name_LB.Visible = true}
		else					
		{shop_name_LB.Visible = false}
		
		if(line_name.Text == "")
		{line_name_LB.Visible = true}
		else					
		{line_name_LB.Visible = false}
					
		if(checklist_name.Text == "")
		{checklist_name_LB.Visible = true}
		else
		{checklist_name_LB.Visible = false}
						
	} else {
		// [Inline Test Statement] MessageBox.Show("Thank you for filling all the required values");
		try {
			var reader : System.Data.SqlClient.SqlDataReader;	
			//[Inline Test Statement] MessageBox.Show(query_string);
			var stored_procedure_query : System.Data.SqlClient.SqlCommand = new System.Data.SqlClient.SqlCommand(query_string, connection);					
			reader = stored_procedure_query.ExecuteReader();
			//Clear();
			checkpoint_status.Items.Clear();
			checkpoint_status.SelectedIndex  = 0;
			actual_value.Clear();
			time_taken.Clear();
			remarks.Clear();

			while(reader.Read())
			{
				response = reader["Response"];
				//MessageBox.Show(response);
			}
			reader.Close();

			// [Closing connection with the database]
			if(connection.Open){
				connection.Close();
			}
		} catch(ex : Exception){
			MessageBox.Show (ex.Message);	
		}	
	}			
								
	checkpoint_name.Text = NextCheckPointName;
	// [Closing connection with the database]
	if(connection.Open){
		connection.Close();
	}
}]]></x:XData>
            </script:ScriptCode>
          </script:ScriptCodeManager.Scripts>
          <script:ScriptCodeManager.AssemblyReferences>
            <ic:AssemblyReference AssemblyName="mscorlib" />
            <ic:AssemblyReference AssemblyName="System" />
            <ic:AssemblyReference AssemblyName="System.Core" />
            <ic:AssemblyReference AssemblyName="System.Data" />
            <ic:AssemblyReference AssemblyName="System.Xml" />
            <ic:AssemblyReference AssemblyName="System.Drawing" />
            <ic:AssemblyReference AssemblyName="System.Windows.Forms" />
            <ic:AssemblyReference AssemblyName="WindowsBase" />
            <ic:AssemblyReference AssemblyName="PresentationCore" />
            <ic:AssemblyReference AssemblyName="PresentationFramework" />
            <ic:AssemblyReference AssemblyName="GwxRuntimeCore" />
            <ic:AssemblyReference AssemblyName="GwxRuntimeCoreCommands" />
            <ic:AssemblyReference AssemblyName="GwxRuntimeViewControl" />
            <ic:AssemblyReference AssemblyName="GwxConfigCore" />
            <ic:AssemblyReference AssemblyName="IcoComponentModel" />
            <ic:AssemblyReference AssemblyName="IcoFwxClientWrapper" />
            <ic:AssemblyReference AssemblyName="GdxViewControl" AssemblyCodebase="file:///C:/Program Files/MELSOFT/MC Works64/Components/GdxViewControl.DLL" />
            <ic:AssemblyReference AssemblyName="IcoWPFSpecialized" AssemblyCodebase="file:///C:/Program Files/MELSOFT/MC Works64/Components/IcoWPFSpecialized.DLL" />
            <ic:AssemblyReference AssemblyName="IcoCommonCore.Net" />
          </script:ScriptCodeManager.AssemblyReferences>
        </script:ScriptCodeManager>
      </gwx:GwxDocument.ScriptCodeManager>
      <gwx:GwxDocument.EventBindings>
        <script:ScriptEventBindings>
          <script:ScriptEventBindings.EventBindings>
            <x:Array Type="script:ScriptEventBinding">
              <script:ScriptEventBinding EventName="AnimationStarted" MethodName="ThisDisplay_AnimationStopped" ScriptType="JScriptNet" />
              <script:ScriptEventBinding EventName="AnimationStarting" MethodName="ThisDisplay_AnimationStarted" ScriptType="JScriptNet" />
            </x:Array>
          </script:ScriptEventBindings.EventBindings>
        </script:ScriptEventBindings>
      </gwx:GwxDocument.EventBindings>
      <gwx:GwxDocument.RuntimeWindowProperties>
        <gwx:GwxWindowProperties LeftString="0%" TopString="0%" WindowState="Maximized" WidthString="100%" HeightString="100%" ControlBox="False" MaximizeBox="False" MinimizeBox="False" HorizontalScrollVisible="Hidden" VerticalScrollVisible="Hidden" MenuVisible="False" ShowContextMenu="False" NavigationBarVisible="False" StatusBarVisible="False" TitleBarVisible="False" OuterBorder="False" Resizable="False" InnerBorder="False" CommandingEnabled="False" DragAndDropCommandingEnabled="False" />
      </gwx:GwxDocument.RuntimeWindowProperties>
      <gwx:GwxDocument.ToolTipOptions>
        <gwx:GwxToolTipOptions ShowToolTips="False" />
      </gwx:GwxDocument.ToolTipOptions>
    </gwx:GwxDocument>
  </gwx:GwxDocument.GwxDocument>
  <TextBox FontFamily="Calibri" FontSize="16" VerticalContentAlignment="Center" Padding="4,2,5,3" Name="RowID" Width="250" Height="25" gwx:GwxProperties.Description="Size=H:25,W:250&#xD;&#xA;Background color=White&#xD;&#xA;Text color=Black&#xD;&#xA;Text Font= Style :Calibri,Size :16&#xD;&#xA;Position= X:232  Y:55" gwx:GwxProperties.ShowDescriptionInToolTip="False" Canvas.Left="1200" Canvas.Top="173.791667">1</TextBox>
  <Label Foreground="#FFFFFFFF" FontFamily="Calibri" FontSize="16" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" IsTabStop="True" Padding="0,0,0,0" Name="Specification" Height="25" gwx:GwxProperties.Description="Size=H:25,W:Automatic&#xD;&#xA;Background color=None&#xD;&#xA;Text color=White&#xD;&#xA;Text Font= Style :Calibri,Size :16&#xD;&#xA;Position= X:77  Y:55" gwx:GwxProperties.ShowDescriptionInToolTip="False" Canvas.Left="5899" Canvas.Top="175">
    <TextBlock Text="Specification UL" />
  </Label>
  <TextBox FontFamily="Segoe UI" FontSize="12" Name="CurrentUser" Width="250" Height="25" Visibility="Hidden" Canvas.Left="232" Canvas.Top="219.746667">
    <gwx:GwxDynamicGroup.GwxDynamicGroup>
      <gwx:GwxDynamicGroup>
        <gwx:GwxDynamicGroup.DynamicsList>
          <gwx:GwxProcessPoint AnimationMode="Analog" DataSource="localsim::currentUser" />
        </gwx:GwxDynamicGroup.DynamicsList>
      </gwx:GwxDynamicGroup>
    </gwx:GwxDynamicGroup.GwxDynamicGroup>
    <gwx:GwxEvents.ScriptEventBindings>
      <script:ScriptEventBindings>
        <script:ScriptEventBindings.EventBindings>
          <x:Array Type="script:ScriptEventBinding">
            <script:ScriptEventBinding EventName="TextChanged" MethodName="CurrentUser_TextChanged" ScriptType="JScriptNet" />
          </x:Array>
        </script:ScriptEventBindings.EventBindings>
      </script:ScriptEventBindings>
    </gwx:GwxEvents.ScriptEventBindings>*.??</TextBox>
  <TextBox FontFamily="Calibri" FontSize="16" VerticalContentAlignment="Center" Padding="4,2,5,3" Name="checkpoint_id" Width="38.918919" Height="25" Visibility="Hidden" gwx:GwxProperties.Description="Size=H:25,W:250&#xD;&#xA;Background color=White&#xD;&#xA;Text color=Black&#xD;&#xA;Text Font= Style :Calibri,Size :16&#xD;&#xA;Position= X:232  Y:55" gwx:GwxProperties.ShowDescriptionInToolTip="False" Canvas.Left="518.243244" Canvas.Top="137.706927">
    <gwx:GwxEvents.ScriptEventBindings>
      <script:ScriptEventBindings>
        <script:ScriptEventBindings.EventBindings>
          <x:Array Type="script:ScriptEventBinding">
            <script:ScriptEventBinding EventName="TextChanged" MethodName="estimated_time_TextChanged" ScriptType="JScriptNet" />
          </x:Array>
        </script:ScriptEventBindings.EventBindings>
      </script:ScriptEventBindings>
    </gwx:GwxEvents.ScriptEventBindings>
  </TextBox>
  <TextBox FontFamily="Calibri" FontSize="16" VerticalContentAlignment="Center" Padding="4,2,5,3" Name="grid_available" Width="51.658641" Height="25" Visibility="Hidden" gwx:GwxProperties.Description="Size=H:25,W:250&#xD;&#xA;Background color=White&#xD;&#xA;Text color=Black&#xD;&#xA;Text Font= Style :Calibri,Size :16&#xD;&#xA;Position= X:232  Y:55" gwx:GwxProperties.ShowDescriptionInToolTip="False" Canvas.Left="1035.731867" Canvas.Top="16.290995">
    <gwx:GwxEvents.ScriptEventBindings>
      <script:ScriptEventBindings>
        <script:ScriptEventBindings.EventBindings>
          <x:Array Type="script:ScriptEventBinding">
            <script:ScriptEventBinding EventName="TextChanged" MethodName="method_TextChanged" ScriptType="JScriptNet" />
          </x:Array>
        </script:ScriptEventBindings.EventBindings>
      </script:ScriptEventBindings>
    </gwx:GwxEvents.ScriptEventBindings>1</TextBox>
  <Label Foreground="#FFFFFFFF" FontFamily="Calibri" FontSize="16" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" IsTabStop="True" Padding="0,0,0,0" Name="checkpoint_name_label" Height="25" gwx:GwxProperties.Description="Size=H:25,W:Automatic&#xD;&#xA;Background color=None&#xD;&#xA;Text color=White&#xD;&#xA;Text Font= Style :Calibri,Size :16&#xD;&#xA;Position= X:77  Y:55" gwx:GwxProperties.ShowDescriptionInToolTip="False" Canvas.Left="75.246418" Canvas.Top="133.000005">
    <TextBlock Text="Checkpoint Name" />
  </Label>
  <TextBox FontFamily="Calibri" FontSize="16" VerticalContentAlignment="Center" Padding="4,2,5,3" Name="checkpoint_name" Width="785.028653" Height="25" gwx:GwxProperties.Description="Size=H:25,W:250&#xD;&#xA;Background color=White&#xD;&#xA;Text color=Black&#xD;&#xA;Text Font= Style :Calibri,Size :16&#xD;&#xA;Position= X:232  Y:55" gwx:GwxProperties.ShowDescriptionInToolTip="False" Canvas.Left="232" Canvas.Top="133.000005">
    <gwx:GwxEvents.ScriptEventBindings>
      <script:ScriptEventBindings>
        <script:ScriptEventBindings.EventBindings>
          <x:Array Type="script:ScriptEventBinding">
            <script:ScriptEventBinding EventName="TextChanged" MethodName="checkpoint_name_TextChanged" ScriptType="JScriptNet" />
          </x:Array>
        </script:ScriptEventBindings.EventBindings>
      </script:ScriptEventBindings>
    </gwx:GwxEvents.ScriptEventBindings>
    <x:Null />
  </TextBox>
  <Label Foreground="#FFC00000" FontFamily="Calibri" FontSize="24" FontWeight="Bold" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" IsTabStop="True" Padding="0,0,0,0" Name="frequency_LB" Width="24.971297" Height="15" Visibility="Hidden" Canvas.Left="1012" Canvas.Top="176">
    <TextBlock Text="*" />
  </Label>
  <TextBox FontFamily="Calibri" FontSize="16" VerticalContentAlignment="Center" Padding="4,2,5,3" Name="remarks" Width="250" Height="25" gwx:GwxProperties.Description="Size=H:25,W:250&#xD;&#xA;Background color=White&#xD;&#xA;Text color=Black&#xD;&#xA;Text Font= Style :Calibri,Size :16&#xD;&#xA;Position= X:232  Y:55" gwx:GwxProperties.ShowDescriptionInToolTip="False" Canvas.Left="767.028625" Canvas.Top="211">
    <gwx:GwxEvents.ScriptEventBindings>
      <script:ScriptEventBindings>
        <script:ScriptEventBindings.EventBindings>
          <x:Array Type="script:ScriptEventBinding">
            <script:ScriptEventBinding EventName="TextChanged" MethodName="estimated_time_TextChanged" ScriptType="JScriptNet" />
          </x:Array>
        </script:ScriptEventBindings.EventBindings>
      </script:ScriptEventBindings>
    </gwx:GwxEvents.ScriptEventBindings>
  </TextBox>
  <Label Foreground="#FFFFFFFF" FontFamily="Calibri" FontSize="16" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" IsTabStop="True" Padding="0,0,0,0" Name="remarks_label" Height="25" gwx:GwxProperties.Description="Size=H:25,W:Automatic&#xD;&#xA;Background color=None&#xD;&#xA;Text color=White&#xD;&#xA;Text Font= Style :Calibri,Size :16&#xD;&#xA;Position= X:77  Y:55" gwx:GwxProperties.ShowDescriptionInToolTip="False" Canvas.Left="591.734131" Canvas.Top="211">
    <TextBlock Text="Remarks" />
  </Label>
  <Label Foreground="#FFFFFFFF" FontFamily="Calibri" FontSize="16" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" IsTabStop="True" Padding="0,0,0,0" Name="stage_name_label" Height="25" gwx:GwxProperties.Description="Size=H:25,W:Automatic&#xD;&#xA;Background color=None&#xD;&#xA;Text color=White&#xD;&#xA;Text Font= Style :Calibri,Size :16&#xD;&#xA;Position= X:77  Y:55" gwx:GwxProperties.ShowDescriptionInToolTip="False" Canvas.Left="589" Canvas.Top="54">
    <TextBlock Text="Stage Name" />
  </Label>
  <ComboBox IsDropDownOpen="False" Text="Stage 0" Background="#FFD8D8D8" FontFamily="Calibri" FontSize="16" Padding="4,2,5,3" Name="stage_name" Width="250" Height="25" Canvas.Left="764.294493" Canvas.Top="54">
    <gwx:GwxEvents.ScriptEventBindings>
      <script:ScriptEventBindings>
        <script:ScriptEventBindings.EventBindings>
          <x:Array Type="script:ScriptEventBinding">
            <script:ScriptEventBinding EventName="DropDownOpened" MethodName="Dropdown_Stage_Name" ScriptType="JScriptNet" />
          </x:Array>
        </script:ScriptEventBindings.EventBindings>
      </script:ScriptEventBindings>
    </gwx:GwxEvents.ScriptEventBindings>
    <s:String>Stage 0</s:String>
    <s:String>Stage 1</s:String>
    <s:String>Stage 10</s:String>
    <s:String>Stage 2</s:String>
    <s:String>Stage 3</s:String>
    <s:String>Stage 4</s:String>
    <s:String>Stage 5</s:String>
    <s:String>Stage 6</s:String>
    <s:String>Stage 7</s:String>
    <s:String>Stage 7.5</s:String>
    <s:String>Stage 8</s:String>
    <s:String>Stage 9</s:String>
  </ComboBox>
  <Label Foreground="#FFC00000" FontFamily="Calibri" FontSize="24" FontWeight="Bold" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" IsTabStop="True" Padding="0,0,0,0" Name="stage_name_LB" Width="24.971297" Height="15" Visibility="Hidden" Canvas.Left="1012" Canvas.Top="54">
    <TextBlock Text="*" />
  </Label>
  <Label Foreground="#FFFFFFFF" FontFamily="Calibri" FontSize="16" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" IsTabStop="True" Padding="0,0,0,0" Name="shop_name_label" Height="25" gwx:GwxProperties.Description="Size=H:25,W:Automatic&#xD;&#xA;Background color=None&#xD;&#xA;Text color=White&#xD;&#xA;Text Font= Style :Calibri,Size :16&#xD;&#xA;Position= X:77  Y:55" gwx:GwxProperties.ShowDescriptionInToolTip="False" Canvas.Left="589" Canvas.Top="15">
    <TextBlock Text="Shop Name" />
  </Label>
  <ComboBox IsDropDownOpen="False" Text="Manless Engine Assembly" Background="#FFD8D8D8" FontFamily="Calibri" FontSize="16" Padding="4,2,5,3" Name="shop_name" Width="250" Height="25" Canvas.Left="764.294493" Canvas.Top="15">
    <gwx:GwxEvents.ScriptEventBindings>
      <script:ScriptEventBindings>
        <script:ScriptEventBindings.EventBindings>
          <x:Array Type="script:ScriptEventBinding">
            <script:ScriptEventBinding EventName="DropDownOpened" MethodName="Dropdown_Shop_Name" ScriptType="JScriptNet" />
          </x:Array>
        </script:ScriptEventBindings.EventBindings>
      </script:ScriptEventBindings>
    </gwx:GwxEvents.ScriptEventBindings>
    <s:String>Manless Engine Assembly</s:String>
  </ComboBox>
  <Label Foreground="#FFC00000" FontFamily="Calibri" FontSize="24" FontWeight="Bold" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" IsTabStop="True" Padding="0,0,0,0" Name="shop_name_LB" Width="24.971297" Height="15" Visibility="Hidden" Canvas.Left="1012" Canvas.Top="15">
    <TextBlock Text="*" />
  </Label>
  <Label Foreground="#FFFFFFFF" FontFamily="Calibri" FontSize="16" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" IsTabStop="True" Padding="0,0,0,0" Name="plant_name_label" Height="25" gwx:GwxProperties.Description="Size=H:25,W:Automatic&#xD;&#xA;Background color=None&#xD;&#xA;Text color=White&#xD;&#xA;Text Font= Style :Calibri,Size :16&#xD;&#xA;Position= X:589  Y:55" gwx:GwxProperties.ShowDescriptionInToolTip="False" Canvas.Left="77" Canvas.Top="15">
    <TextBlock Text="Plant Name" />
  </Label>
  <ComboBox IsDropDownOpen="False" Text="Bajaj Chakan 1" Background="#FFD8D8D8" FontFamily="Calibri" FontSize="16" Padding="4,2,5,3" Name="plant_name" Width="250" Height="25" Canvas.Left="232" Canvas.Top="15">
    <gwx:GwxEvents.ScriptEventBindings>
      <script:ScriptEventBindings>
        <script:ScriptEventBindings.EventBindings>
          <x:Array Type="script:ScriptEventBinding">
            <script:ScriptEventBinding EventName="DropDownOpened" MethodName="Dropdown_Plant_Name" ScriptType="JScriptNet" />
          </x:Array>
        </script:ScriptEventBindings.EventBindings>
      </script:ScriptEventBindings>
    </gwx:GwxEvents.ScriptEventBindings>
    <s:String>Bajaj Chakan 1</s:String>
    <s:String>Bajaj Chakan 2</s:String>
    <s:String>New Plant</s:String>
  </ComboBox>
  <Label Foreground="#FFC00000" FontFamily="Calibri" FontSize="24" FontWeight="Bold" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" IsTabStop="True" Padding="0,0,0,0" Name="plant_name_LB" Width="24.971297" Height="15" Visibility="Hidden" Canvas.Left="490" Canvas.Top="15">
    <TextBlock Text="*" />
  </Label>
  <Canvas>
    <Label Foreground="#FFFFFFFF" FontFamily="Calibri" FontSize="16" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" IsTabStop="True" Padding="0,0,0,0" Name="line_name_label" Height="25" gwx:GwxProperties.Description="Size=H:25,W:Automatic&#xD;&#xA;Background color=None&#xD;&#xA;Text color=White&#xD;&#xA;Text Font= Style :Calibri,Size :16&#xD;&#xA;Position= X:589  Y:55" gwx:GwxProperties.ShowDescriptionInToolTip="False" Canvas.Left="77" Canvas.Top="54">
      <TextBlock Text="Line Name" />
    </Label>
    <ComboBox IsDropDownOpen="False" Text="Sub Group 1" Background="#FFD8D8D8" FontFamily="Calibri" FontSize="16" Padding="4,2,5,3" Name="line_name" Width="250" Height="25" Canvas.Left="232" Canvas.Top="54">
      <gwx:GwxEvents.ScriptEventBindings>
        <script:ScriptEventBindings>
          <script:ScriptEventBindings.EventBindings>
            <x:Array Type="script:ScriptEventBinding">
              <script:ScriptEventBinding EventName="DropDownOpened" MethodName="Dropdown_Line_Name" ScriptType="JScriptNet" />
            </x:Array>
          </script:ScriptEventBindings.EventBindings>
        </script:ScriptEventBindings>
      </gwx:GwxEvents.ScriptEventBindings>
      <s:String>Sub Group 1</s:String>
      <s:String>Sub Group 2</s:String>
      <s:String>Sub Group 3</s:String>
    </ComboBox>
    <Label Foreground="#FFC00000" FontFamily="Calibri" FontSize="24" FontWeight="Bold" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" IsTabStop="True" Padding="0,0,0,0" Name="line_name_LB" Width="24.971297" Height="15" Visibility="Hidden" Canvas.Left="490" Canvas.Top="54">
      <TextBlock Text="*" />
    </Label>
  </Canvas>
  <Label Foreground="#FFFFFFFF" FontFamily="Calibri" FontSize="16" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" IsTabStop="True" Padding="0,0,0,0" Name="checklist_name_label" Height="25" gwx:GwxProperties.Description="Size=H:25,W:Automatic&#xD;&#xA;Background color=None&#xD;&#xA;Text color=White&#xD;&#xA;Text Font= Style :Calibri,Size :16&#xD;&#xA;Position= X:77  Y:55" gwx:GwxProperties.ShowDescriptionInToolTip="False" Canvas.Left="77" Canvas.Top="93">
    <TextBlock Text="Checklist Name" />
  </Label>
  <Label Foreground="#FFC00000" FontFamily="Calibri" FontSize="24" FontWeight="Bold" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" IsTabStop="True" Padding="0,0,0,0" Name="checklist_name_LB" Width="24.971297" Height="15" Visibility="Hidden" Canvas.Left="490" Canvas.Top="93">
    <TextBlock Text="*" />
  </Label>
  <Label Foreground="#FFC00000" FontFamily="Calibri" FontSize="24" FontWeight="Bold" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" IsTabStop="True" Padding="0,0,0,0" Name="checkpoint_type_LB" Width="24.971297" Height="15" Visibility="Hidden" Canvas.Left="490" Canvas.Top="93">
    <TextBlock Text="*" />
  </Label>
  <ComboBox IsDropDownOpen="False" Text="jh activity checklist" Background="#FFD8D8D8" FontFamily="Calibri" FontSize="16" Padding="4,2,5,3" Name="checklist_name" Width="250" Height="25" Canvas.Left="232" Canvas.Top="93">
    <gwx:GwxEvents.ScriptEventBindings>
      <script:ScriptEventBindings>
        <script:ScriptEventBindings.EventBindings>
          <x:Array Type="script:ScriptEventBinding">
            <script:ScriptEventBinding EventName="DropDownOpened" MethodName="Dropdown_Checklist_Name" ScriptType="JScriptNet" />
          </x:Array>
        </script:ScriptEventBindings.EventBindings>
      </script:ScriptEventBindings>
    </gwx:GwxEvents.ScriptEventBindings>
    <s:String>jh activity checklist</s:String>
    <s:String>preventive maintenance checklist</s:String>
  </ComboBox>
  <Label Foreground="#FFFFFFFF" FontFamily="Calibri" FontSize="16" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" IsTabStop="True" Padding="0,0,0,0" Name="actual_value_label" Height="25" gwx:GwxProperties.Description="Size=H:25,W:Automatic&#xD;&#xA;Background color=None&#xD;&#xA;Text color=White&#xD;&#xA;Text Font= Style :Calibri,Size :16&#xD;&#xA;Position= X:77  Y:55" gwx:GwxProperties.ShowDescriptionInToolTip="False" Canvas.Left="77" Canvas.Top="172">
    <TextBlock Text="Actual Value" />
  </Label>
  <TextBox FontFamily="Calibri" FontSize="16" VerticalContentAlignment="Center" Padding="4,2,5,3" Name="actual_value" Width="250" Height="25" gwx:GwxProperties.Description="Size=H:25,W:250&#xD;&#xA;Background color=White&#xD;&#xA;Text color=Black&#xD;&#xA;Text Font= Style :Calibri,Size :16&#xD;&#xA;Position= X:232  Y:55" gwx:GwxProperties.ShowDescriptionInToolTip="False" Canvas.Left="232" Canvas.Top="172">
    <gwx:GwxEvents.ScriptEventBindings>
      <script:ScriptEventBindings>
        <script:ScriptEventBindings.EventBindings>
          <x:Array Type="script:ScriptEventBinding">
            <script:ScriptEventBinding EventName="TextChanged" MethodName="method_TextChanged" ScriptType="JScriptNet" />
          </x:Array>
        </script:ScriptEventBindings.EventBindings>
      </script:ScriptEventBindings>
    </gwx:GwxEvents.ScriptEventBindings>0</TextBox>
  <Rectangle Stroke="#FF000000" Width="1100" Height="35.465465" Canvas.Left="0" Canvas.Top="300">
    <Rectangle.Fill>
      <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
        <LinearGradientBrush.GradientStops>
          <GradientStop Color="#FFF5F5F5" Offset="0" />
          <GradientStop Color="#FFEBEBEB" Offset="0.49" />
          <GradientStop Color="#FFE1E1E1" Offset="0.51" />
          <GradientStop Color="#FFCDCDCD" Offset="1" />
        </LinearGradientBrush.GradientStops>
        <LinearGradientBrush.RelativeTransform>
          <RotateTransform Angle="90" CenterX="0.5" CenterY="0.5" />
        </LinearGradientBrush.RelativeTransform>
      </LinearGradientBrush>
    </Rectangle.Fill>
  </Rectangle>
  <Label Foreground="#FFFFFFFF" FontFamily="Calibri" FontSize="16" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" IsTabStop="True" Padding="0,0,0,0" Name="checkpoint_status_label" Height="25" gwx:GwxProperties.Description="Size=H:25,W:Automatic&#xD;&#xA;Background color=None&#xD;&#xA;Text color=White&#xD;&#xA;Text Font= Style :Calibri,Size :16&#xD;&#xA;Position= X:77  Y:55" gwx:GwxProperties.ShowDescriptionInToolTip="False" Canvas.Left="77" Canvas.Top="211">
    <TextBlock Text="Checkpoint Status" />
  </Label>
  <ComboBox IsDropDownOpen="False" Text="Not Ok" Background="#FFD8D8D8" FontFamily="Calibri" FontSize="16" Padding="4,2,5,3" Name="checkpoint_status" Width="250" Height="25" Canvas.Left="232" Canvas.Top="211">
    <gwx:GwxEvents.ScriptEventBindings>
      <script:ScriptEventBindings>
        <script:ScriptEventBindings.EventBindings>
          <x:Array Type="script:ScriptEventBinding">
            <script:ScriptEventBinding EventName="DropDownOpened" MethodName="Dropdown_Checkpoint_Status" ScriptType="JScriptNet" />
          </x:Array>
        </script:ScriptEventBindings.EventBindings>
      </script:ScriptEventBindings>
    </gwx:GwxEvents.ScriptEventBindings>
    <s:String>Ok</s:String>
    <s:String>Not Ok</s:String>
  </ComboBox>
  <Label Foreground="#FFFFFFFF" FontFamily="Calibri" FontSize="16" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" IsTabStop="True" Padding="0,0,0,0" Name="time_taken_label" Height="25" gwx:GwxProperties.Description="Size=H:25,W:Automatic&#xD;&#xA;Background color=None&#xD;&#xA;Text color=White&#xD;&#xA;Text Font= Style :Calibri,Size :16&#xD;&#xA;Position= X:77  Y:55" gwx:GwxProperties.ShowDescriptionInToolTip="False" Canvas.Left="591.734158" Canvas.Top="172">
    <TextBlock Text="Time Taken(min)" />
  </Label>
  <TextBox FontFamily="Calibri" FontSize="16" VerticalContentAlignment="Center" Padding="4,2,5,3" Name="time_taken" Width="250" Height="25" gwx:GwxProperties.Description="Size=H:25,W:250&#xD;&#xA;Background color=White&#xD;&#xA;Text color=Black&#xD;&#xA;Text Font= Style :Calibri,Size :16&#xD;&#xA;Position= X:232  Y:55" gwx:GwxProperties.ShowDescriptionInToolTip="False" Canvas.Left="767.028651" Canvas.Top="172">
    <gwx:GwxEvents.ScriptEventBindings>
      <script:ScriptEventBindings>
        <script:ScriptEventBindings.EventBindings>
          <x:Array Type="script:ScriptEventBinding">
            <script:ScriptEventBinding EventName="TextChanged" MethodName="method_TextChanged" ScriptType="JScriptNet" />
          </x:Array>
        </script:ScriptEventBindings.EventBindings>
      </script:ScriptEventBindings>
    </gwx:GwxEvents.ScriptEventBindings>0</TextBox>
  <ig:GdxViewControl FileVersion="10.97.020.00" FontFamily="Segoe UI" FontSize="12" IsTabStop="True" Name="default_grid" Width="1100" Height="419.255255" VerticalAlignment="Bottom" gwx:GwxProperties.Description="Grid Size=H:443,W:1100&#xD;&#xA;Position=X:0,Y:300&#xD;&#xA;Grid Header Font=Style :Calibri,Size:17,Color:White&#xD;&#xA;Grid Header Background color=R :0,G : 24,B :72&#xD;&#xA;Grid Text Font=Style :Calibri,Size:16,Color:White&#xD;&#xA;Grid Scrolbar Foreground color=R :0,G : 24,B :72&#xD;&#xA;" gwx:GwxProperties.ShowDescriptionInToolTip="False" Canvas.Left="0" Canvas.Top="305.631751">
    <ig:GdxViewControl.DataDictionaryRepository>
      <ig13:DataDictionary Name="Asset_Status" Key="11139557">
        <ig13:TextDataTranslation Text="Enable" FilterKey="35955500" />
        <ig13:TextDataTranslation Text="Disable" FilterKey="18984797" />
      </ig13:DataDictionary>
      <ig13:DataDictionary Name="Tool_Allocation" Key="64349806">
        <ig13:TextDataTranslation Text="NotApplicable" FilterKey="62472706" />
        <ig13:TextDataTranslation Text="Applicable" FilterKey="17076602" />
      </ig13:DataDictionary>
      <ig13:DataDictionary Name="New Text Translation" Key="48165881" />
    </ig:GdxViewControl.DataDictionaryRepository>
    <ig:GdxViewControl.FiltersRepository>
      <igd:GdxFilter Key="35955500" Expression="x={{AssetStatus}} == 1" Name="AssetStat_En" />
      <igd:GdxFilter Key="18984797" Expression="x={{AssetStatus}}==0" Name="AssetStat_Di" />
      <igd:GdxFilter Key="62472706" Expression="x={{ToolAllocation}}==0" Name="Tool_Alloc_NA" />
      <igd:GdxFilter Key="17076602" Expression="x={{ToolAllocation}}==1" Name="Tool_Alloc_A" />
    </ig:GdxViewControl.FiltersRepository>
    <ig:GdxViewControl.SubscriptionsRepository>
      <igd:GdxSubscription Key="32833728" Name="New Subscription">
        <igd:GdxSubscription.Fields>
          <igd:GdxDataField Key="RowID" BuiltInType="Int64" />
          <igd:GdxDataField Key="LineID" />
          <igd:GdxDataField Key="LineName" />
          <igd:GdxDataField Key="AssetID" />
          <igd:GdxDataField Key="AssetName" />
          <igd:GdxDataField Key="AssetMake" />
          <igd:GdxDataField Key="AssetController" />
          <igd:GdxDataField Key="InstallationDate" BuiltInType="DateTime" />
        </igd:GdxSubscription.Fields>
        <igd:GdxSubscription.Tags>
          <s:String>db:CumiMetz.GridAssetInfo</s:String>
        </igd:GdxSubscription.Tags>
      </igd:GdxSubscription>
      <igd:GdxSubscription Key="35581412" Name="New Subscription">
        <igd:GdxSubscription.Fields>
          <igd:GdxDataField Key="ProcessName" />
          <igd:GdxDataField Key="ProcessID" />
          <igd:GdxDataField Key="AssetID" />
          <igd:GdxDataField Key="AssetName" />
          <igd:GdxDataField Key="AssetStatus" BuiltInType="Int32" />
        </igd:GdxSubscription.Fields>
        <igd:GdxSubscription.Tags>
          <s:String>db:Cumi_LE_Line.GridmAssetInfo</s:String>
        </igd:GdxSubscription.Tags>
      </igd:GdxSubscription>
      <igd:GdxSubscription Key="60518608" Name="New Subscription">
        <igd:GdxSubscription.Fields>
          <igd:GdxDataField Key="ProcessName" />
          <igd:GdxDataField IsReadOnly="True" Key="RowID" BuiltInType="Int64" />
          <igd:GdxDataField IsPrimaryKey="True" Key="ProcessID" />
          <igd:GdxDataField Key="AssetID" />
          <igd:GdxDataField Key="AssetName" />
          <igd:GdxDataField Key="AssetStatus" BuiltInType="Int32" />
        </igd:GdxSubscription.Fields>
        <igd:GdxSubscription.Tags>
          <s:String>db:CUMI_LE_Line.GridmAssetInfo</s:String>
        </igd:GdxSubscription.Tags>
      </igd:GdxSubscription>
      <igd:GdxSubscription Key="20630641" Name="New Subscription" />
      <igd:GdxSubscription Key="24542149" Name="New Subscription">
        <igd:GdxSubscription.Fields>
          <igd:GdxDataField Key="uid" BuiltInType="Int32" />
          <igd:GdxDataField IsPrimaryKey="True" Key="plant_name" />
          <igd:GdxDataField IsPrimaryKey="True" Key="shop_name" />
          <igd:GdxDataField IsPrimaryKey="True" Key="line_id" BuiltInType="Int32" />
          <igd:GdxDataField Key="line_name" />
          <igd:GdxDataField IsPrimaryKey="True" Key="stage_id" BuiltInType="Int32" />
          <igd:GdxDataField Key="stage_name" />
          <igd:GdxDataField IsPrimaryKey="True" Key="checklist_id" BuiltInType="Int32" />
          <igd:GdxDataField Key="checklist_name" />
          <igd:GdxDataField IsPrimaryKey="True" Key="checkpoint_name" />
          <igd:GdxDataField Key="actual_value" BuiltInType="Double" />
          <igd:GdxDataField Key="checkpoint_status" />
          <igd:GdxDataField Key="time_taken_in_minutes" BuiltInType="Int32" />
          <igd:GdxDataField Key="remarks" />
          <igd:GdxDataField Key="created_by" />
          <igd:GdxDataField Key="created_on" BuiltInType="DateTime" />
        </igd:GdxSubscription.Fields>
        <igd:GdxSubscription.Tags>
          <s:String>db:BajajMEA.Maintenance_Execution</s:String>
        </igd:GdxSubscription.Tags>
      </igd:GdxSubscription>
    </ig:GdxViewControl.SubscriptionsRepository>
    <ig:GdxViewControl.Header>
      <TextBlock Text="PM Execution" FontFamily="Calibri" FontStyle="Normal" FontWeight="Bold" FontSize="18" Foreground="#FF001848" Padding="0,0,0,0" TextAlignment="Center" Visibility="Visible" />
    </ig:GdxViewControl.Header>
    <ig:GdxViewControl.Items>
      <iwc:MultipleTabItem IsSelected="True" Header="Tab" FontFamily="Calibri" FontSize="16">
        <ig:GdxGridView HeaderBackground="#FF001848" HeaderBorderBrush="#FFFFFFFF" HeaderCellBorderThickness="0.75,0.75,0.75,0.75" HeaderFontFamily="Calibri" HeaderFontSize="17" HeaderMouseOverForeground="#FFFFFFFF" HeaderMouseOverBorderBrush="#FF000000" HeaderSelectedForeground="#FFFFFFFF" HeaderSelectedBorderBrush="#FF000000" GroupHeaderBorderBrush="#FFFFFFFF" GroupHeaderForeground="#FFFFFFFF" RowHeaderBackground="#FFD8D8D8" RowHeaderBorderBrush="#FFD8D8D8" RowHeaderCellBorderBrush="#FF626262" RowHeaderBorderThickness="0,0,1,2" RowHeight="25" ScrollBarBackground="#FFD8D8D8" ScrollBarForeground="#FF001848" ScrollBarMouseOverForeground="#FF171F31" ScrollBarMousePressedForeground="#FF171F31" ScrollBarBorderBrush="#FF373D54" ScrollBarMouseOverBorderBrush="#FF229EC8" DateTimeFormat="d" DoubleFormat="N0" SubscriptionID="24542149" AllowPaging="False" BorderBrush="#FFA5B6CB" BorderThickness="0,0,0,0" Background="#FFFFFFFF" FontFamily="Calibri" FontSize="16" Uid="local:GdxView_1">
          <ig:GdxGridView.HeaderMouseOverBackground>
            <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5" Opacity="1">
              <LinearGradientBrush.GradientStops>
                <GradientStop Color="#FF8993A2" Offset="0" />
                <GradientStop Color="#FF545F6D" Offset="0.5" />
                <GradientStop Color="#FF0C1C32" Offset="0.51" />
                <GradientStop Color="#FF132F54" Offset="1" />
              </LinearGradientBrush.GradientStops>
              <LinearGradientBrush.RelativeTransform>
                <RotateTransform Angle="90" CenterX="0.5" CenterY="0.5" />
              </LinearGradientBrush.RelativeTransform>
            </LinearGradientBrush>
          </ig:GdxGridView.HeaderMouseOverBackground>
          <ig:GdxGridView.HeaderSelectedBackground>
            <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5" Opacity="1">
              <LinearGradientBrush.GradientStops>
                <GradientStop Color="#FF6078C8" Offset="0" />
                <GradientStop Color="#FF4961B2" Offset="0.4" />
                <GradientStop Color="#FF16399C" Offset="0.41" />
                <GradientStop Color="#FF16399C" Offset="0.74" />
                <GradientStop Color="#FF173C9F" Offset="0.75" />
                <GradientStop Color="#FF39C0DC" Offset="1" />
              </LinearGradientBrush.GradientStops>
              <LinearGradientBrush.RelativeTransform>
                <RotateTransform Angle="90" CenterX="0.5" CenterY="0.5" />
              </LinearGradientBrush.RelativeTransform>
            </LinearGradientBrush>
          </ig:GdxGridView.HeaderSelectedBackground>
          <ig:GdxGridView.GroupHeaderBackground>
            <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5" Opacity="1">
              <LinearGradientBrush.GradientStops>
                <GradientStop Color="#FF393F4B" Offset="0" />
                <GradientStop Color="#FF121212" Offset="1" />
              </LinearGradientBrush.GradientStops>
              <LinearGradientBrush.RelativeTransform>
                <RotateTransform Angle="90" CenterX="0.5" CenterY="0.5" />
              </LinearGradientBrush.RelativeTransform>
            </LinearGradientBrush>
          </ig:GdxGridView.GroupHeaderBackground>
          <ig:GdxGridView.MouseOverBackground>
            <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5" Opacity="0.3">
              <LinearGradientBrush.GradientStops>
                <GradientStop Color="#FF6078C8" Offset="0" />
                <GradientStop Color="#FF4961B2" Offset="0.4" />
                <GradientStop Color="#FF16399C" Offset="0.41" />
                <GradientStop Color="#FF16399C" Offset="0.74" />
                <GradientStop Color="#FF173C9F" Offset="0.75" />
                <GradientStop Color="#FF39C0DC" Offset="1" />
              </LinearGradientBrush.GradientStops>
              <LinearGradientBrush.RelativeTransform>
                <RotateTransform Angle="90" CenterX="0.5" CenterY="0.5" />
              </LinearGradientBrush.RelativeTransform>
            </LinearGradientBrush>
          </ig:GdxGridView.MouseOverBackground>
          <ig:GdxGridView.SelectionBackground>
            <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5" Opacity="0.9">
              <LinearGradientBrush.GradientStops>
                <GradientStop Color="#FF6078C8" Offset="0" />
                <GradientStop Color="#FF4961B2" Offset="0.4" />
                <GradientStop Color="#FF16399C" Offset="0.41" />
                <GradientStop Color="#FF16399C" Offset="0.74" />
                <GradientStop Color="#FF173C9F" Offset="0.75" />
                <GradientStop Color="#FF39C0DC" Offset="1" />
              </LinearGradientBrush.GradientStops>
              <LinearGradientBrush.RelativeTransform>
                <RotateTransform Angle="90" CenterX="0.5" CenterY="0.5" />
              </LinearGradientBrush.RelativeTransform>
            </LinearGradientBrush>
          </ig:GdxGridView.SelectionBackground>
          <ig:GdxGridView.Columns>
            <ig:GdxColumn Key="uid" IsVisible="False" Format="{x:Null}" Text="uid" />
            <ig:GdxColumn Key="plant_name" Index="1" Format="{x:Null}" Text="Plant Name" TextAlignment="Center" IsStar="True" />
            <ig:GdxColumn Key="shop_name" Index="2" Format="{x:Null}" Text="Shop Name" TextAlignment="Center" IsStar="True" />
            <ig:GdxColumn Key="line_id" Index="3" IsVisible="False" Format="{x:Null}" Text="Line" />
            <ig:GdxColumn Key="line_name" Index="4" Format="{x:Null}" Text="Line Name" TextAlignment="Center" IsStar="True" />
            <ig:GdxColumn Key="stage_id" Index="5" IsVisible="False" Format="{x:Null}" Text="stage_id" />
            <ig:GdxColumn Key="stage_name" Index="6" Format="{x:Null}" Text="Stage Name" TextAlignment="Center" IsStar="True" />
            <ig:GdxColumn Key="checklist_id" Index="7" Format="{x:Null}" Text="Checklist ID" TextAlignment="Center" IsStar="True" />
            <ig:GdxColumn Key="checklist_name" Index="8" Format="{x:Null}" Text="Checklist Name" TextAlignment="Center" IsStar="True" />
            <ig:GdxColumn Key="checkpoint_name" Index="9" Format="{x:Null}" Text="Checkpoint Name" TextAlignment="Center" IsStar="True" />
            <ig:GdxColumn Key="actual_value" Index="10" Format="{x:Null}" Text="Actual Value" TextAlignment="Center" IsStar="True" />
            <ig:GdxColumn Key="checkpoint_status" Index="11" Format="{x:Null}" Text="Checkpoint Status" TextAlignment="Center" IsStar="True" />
            <ig:GdxColumn Key="time_taken_in_minutes" Index="12" Format="{x:Null}" Text="Time Taken" TextAlignment="Center" IsStar="True" />
            <ig:GdxColumn Key="remarks" Index="13" Format="{x:Null}" Text="Remarks" TextAlignment="Center" IsStar="True" />
            <ig:GdxColumn Key="created_by" Index="14" IsVisible="False" Format="{x:Null}" Text="created_by" />
            <ig:GdxColumn Key="created_on" Index="15" IsVisible="False" Format="{x:Null}" Text="created_on" />
          </ig:GdxGridView.Columns>
        </ig:GdxGridView>
      </iwc:MultipleTabItem>
    </ig:GdxViewControl.Items>
    <gwx:GwxDynamicGroup.GwxDynamicGroup>
      <gwx:GwxDynamicGroup>
        <gwx:GwxDynamicGroup.DynamicsList>
          <gwx:GwxPick LeftMouseButton="True" ExecuteOnUp="True" Name="GridScript" ShowToolTip="False" Control="True">
            <gwx:GwxPick.CommandParameters>
              <gwxcmd:ScriptCommand />
            </gwx:GwxPick.CommandParameters>
            <gwx:GwxPick.EventBindings>
              <script:ScriptEventBindings>
                <script:ScriptEventBindings.EventBindings>
                  <x:Array Type="script:ScriptEventBinding">
                    <script:ScriptEventBinding EventName="CommandExecuted" MethodName="Grid" ScriptType="JScriptNet" />
                  </x:Array>
                </script:ScriptEventBindings.EventBindings>
              </script:ScriptEventBindings>
            </gwx:GwxPick.EventBindings>
          </gwx:GwxPick>
        </gwx:GwxDynamicGroup.DynamicsList>
      </gwx:GwxDynamicGroup>
    </gwx:GwxDynamicGroup.GwxDynamicGroup>
  </ig:GdxViewControl>
  <Button Background="#FF001848" Foreground="#FFFFFFFF" FontFamily="Calibri" FontSize="12" Name="MODIFY" Width="125" Height="25" Focusable="True" gwx:GwxProperties.Description="Size=H:25,W:125&#xD;&#xA;Background color=R :255,G : 255,B :255&#xD;&#xA;Text color=White&#xD;&#xA;Text Font= Style :Calibri,Size :12&#xD;&#xA;Position= X:933  Y:233" gwx:GwxProperties.ShowDescriptionInToolTip="False" Canvas.Left="891.065543" Canvas.Top="255.207921">
    <gwx:GwxDynamicGroup.GwxDynamicGroup>
      <gwx:GwxDynamicGroup>
        <gwx:GwxDynamicGroup.DynamicsList>
          <gwx:GwxPick LeftMouseButton="True" ExecuteOnUp="True" Name="RemoveScript1" Control="True">
            <gwx:GwxPick.CommandParameters>
              <gwxcmd:ScriptCommand />
            </gwx:GwxPick.CommandParameters>
            <gwx:GwxPick.EventBindings>
              <script:ScriptEventBindings>
                <script:ScriptEventBindings.EventBindings>
                  <x:Array Type="script:ScriptEventBinding">
                    <script:ScriptEventBinding EventName="CommandExecuted" MethodName="Update" ScriptType="JScriptNet" />
                  </x:Array>
                </script:ScriptEventBindings.EventBindings>
              </script:ScriptEventBindings>
            </gwx:GwxPick.EventBindings>
          </gwx:GwxPick>
          <gwx:GwxPick LeftMouseButton="True" ExecuteOnDown="True" ExecuteOnUp="True" DataSource="db:BajajMEA.Maintenance_Execution.@@Refresh" Control="True">
            <gwx:GwxPick.CommandParameters>
              <gwxcmd:WriteValueCommand OnDownValue="1" OnUpValue="0" />
            </gwx:GwxPick.CommandParameters>
          </gwx:GwxPick>
        </gwx:GwxDynamicGroup.DynamicsList>
      </gwx:GwxDynamicGroup>
    </gwx:GwxDynamicGroup.GwxDynamicGroup>
    <TextBlock Text="MODIFY" />
  </Button>
  <Canvas>
    <Button Background="#FF001848" Foreground="#FFFFFFFF" FontFamily="Calibri" FontSize="12" Name="SAVE" Width="125" Height="25" Visibility="Hidden" gwx:GwxProperties.Description="Size=H:25,W:125&#xD;&#xA;Background color=R :255,G : 255,B :255&#xD;&#xA;Text color=White&#xD;&#xA;Text Font= Style :Calibri,Size :12&#xD;&#xA;Position= X:647  Y:233" gwx:GwxProperties.ShowDescriptionInToolTip="True" Canvas.Left="892.028625" Canvas.Top="257.138031">
      <gwx:GwxDynamicGroup.GwxDynamicGroup>
        <gwx:GwxDynamicGroup>
          <gwx:GwxDynamicGroup.DynamicsList>
            <gwx:GwxPick LeftMouseButton="True" ExecuteOnUp="True" Name="AddScript" Control="True">
              <gwx:GwxPick.CommandParameters>
                <gwxcmd:ScriptCommand />
              </gwx:GwxPick.CommandParameters>
              <gwx:GwxPick.EventBindings>
                <script:ScriptEventBindings>
                  <script:ScriptEventBindings.EventBindings>
                    <x:Array Type="script:ScriptEventBinding">
                      <script:ScriptEventBinding EventName="CommandExecuted" MethodName="Save" ScriptType="JScriptNet" />
                    </x:Array>
                  </script:ScriptEventBindings.EventBindings>
                </script:ScriptEventBindings>
              </gwx:GwxPick.EventBindings>
            </gwx:GwxPick>
          </gwx:GwxDynamicGroup.DynamicsList>
        </gwx:GwxDynamicGroup>
      </gwx:GwxDynamicGroup.GwxDynamicGroup>
      <TextBlock Text="SAVE" />
    </Button>
    <Canvas Name="Group1">
      <gwx:GwxDynamicGroup.GwxDynamicGroup>
        <gwx:GwxDynamicGroup>
          <gwx:GwxDynamicGroup.DynamicsList>
            <gwx:GwxPick LeftMouseButton="True" ExecuteOnDown="True" ExecuteOnUp="True" DataSource="db:BajajMEA.Maintenance_Execution.@@Refresh" Control="True">
              <gwx:GwxPick.CommandParameters>
                <gwxcmd:WriteValueCommand OnDownValue="1" OnUpValue="0" />
              </gwx:GwxPick.CommandParameters>
            </gwx:GwxPick>
          </gwx:GwxDynamicGroup.DynamicsList>
        </gwx:GwxDynamicGroup>
      </gwx:GwxDynamicGroup.GwxDynamicGroup>
      <Button Background="#FF001848" Foreground="#FFFFFFFF" FontFamily="Calibri" FontSize="12" Name="START" Width="125" Height="25" Visibility="Hidden" gwx:GwxProperties.Description="Size=H:25,W:125&#xD;&#xA;Background color=R :255,G : 255,B :255&#xD;&#xA;Text color=White&#xD;&#xA;Text Font= Style :Calibri,Size :12&#xD;&#xA;Position= X:790  Y:233" gwx:GwxProperties.ShowDescriptionInToolTip="False" Canvas.Left="762.083066" Canvas.Top="257.138023">
        <gwx:GwxDynamicGroup.GwxDynamicGroup>
          <gwx:GwxDynamicGroup>
            <gwx:GwxDynamicGroup.DynamicsList>
              <gwx:GwxPick LeftMouseButton="True" ExecuteOnUp="True" Name="ModifyScript" Control="True">
                <gwx:GwxPick.CommandParameters>
                  <gwxcmd:ScriptCommand />
                </gwx:GwxPick.CommandParameters>
                <gwx:GwxPick.EventBindings>
                  <script:ScriptEventBindings>
                    <script:ScriptEventBindings.EventBindings>
                      <x:Array Type="script:ScriptEventBinding">
                        <script:ScriptEventBinding EventName="CommandExecuted" MethodName="CheckListStart" ScriptType="JScriptNet" />
                      </x:Array>
                    </script:ScriptEventBindings.EventBindings>
                  </script:ScriptEventBindings>
                </gwx:GwxPick.EventBindings>
              </gwx:GwxPick>
            </gwx:GwxDynamicGroup.DynamicsList>
          </gwx:GwxDynamicGroup>
        </gwx:GwxDynamicGroup.GwxDynamicGroup>
        <TextBlock Text="START" />
      </Button>
      <Button Background="#FF001848" Foreground="#FFFFFFFF" FontFamily="Calibri" FontSize="12" Name="COMPLETE" Width="125" Height="25" Focusable="True" gwx:GwxProperties.Description="Size=H:25,W:125&#xD;&#xA;Background color=R :255,G : 255,B :255&#xD;&#xA;Text color=White&#xD;&#xA;Text Font= Style :Calibri,Size :12&#xD;&#xA;Position= X:933  Y:233" gwx:GwxProperties.ShowDescriptionInToolTip="False" Canvas.Left="762.083066" Canvas.Top="257.138023">
        <gwx:GwxDynamicGroup.GwxDynamicGroup>
          <gwx:GwxDynamicGroup>
            <gwx:GwxDynamicGroup.DynamicsList>
              <gwx:GwxPick LeftMouseButton="True" ExecuteOnUp="True" Name="RemoveScript" Control="True">
                <gwx:GwxPick.CommandParameters>
                  <gwxcmd:ScriptCommand />
                </gwx:GwxPick.CommandParameters>
                <gwx:GwxPick.EventBindings>
                  <script:ScriptEventBindings>
                    <script:ScriptEventBindings.EventBindings>
                      <x:Array Type="script:ScriptEventBinding">
                        <script:ScriptEventBinding EventName="CommandExecuted" MethodName="Complete" ScriptType="JScriptNet" />
                      </x:Array>
                    </script:ScriptEventBindings.EventBindings>
                  </script:ScriptEventBindings>
                </gwx:GwxPick.EventBindings>
              </gwx:GwxPick>
            </gwx:GwxDynamicGroup.DynamicsList>
          </gwx:GwxDynamicGroup>
        </gwx:GwxDynamicGroup.GwxDynamicGroup>
        <TextBlock Text="COMPLETE" />
      </Button>
    </Canvas>
    <Canvas>
      <Button Background="#FF001848" Foreground="#FFFFFFFF" FontFamily="Calibri" FontSize="12" Name="Clear" Width="125" Height="25" gwx:GwxProperties.Description="Size=H:25,W:125&#xD;&#xA;Background color=R :255,G : 255,B :255&#xD;&#xA;Text color=White&#xD;&#xA;Text Font= Style :Calibri,Size :12&#xD;&#xA;Position= X:504  Y:233" gwx:GwxProperties.ShowDescriptionInToolTip="False" Canvas.Left="632.137507" Canvas.Top="257.138033">
        <gwx:GwxDynamicGroup.GwxDynamicGroup>
          <gwx:GwxDynamicGroup>
            <gwx:GwxDynamicGroup.DynamicsList>
              <gwx:GwxPick LeftMouseButton="True" ExecuteOnUp="True" Name="ClearScript" Control="True">
                <gwx:GwxPick.CommandParameters>
                  <gwxcmd:ScriptCommand />
                </gwx:GwxPick.CommandParameters>
                <gwx:GwxPick.EventBindings>
                  <script:ScriptEventBindings>
                    <script:ScriptEventBindings.EventBindings>
                      <x:Array Type="script:ScriptEventBinding">
                        <script:ScriptEventBinding EventName="CommandExecuted" MethodName="Clear" ScriptType="JScriptNet" />
                      </x:Array>
                    </script:ScriptEventBindings.EventBindings>
                  </script:ScriptEventBindings>
                </gwx:GwxPick.EventBindings>
              </gwx:GwxPick>
            </gwx:GwxDynamicGroup.DynamicsList>
          </gwx:GwxDynamicGroup>
        </gwx:GwxDynamicGroup.GwxDynamicGroup>
        <TextBlock Text="CLEAR" />
      </Button>
      <Canvas>
        <Path Fill="#FFFFFFFF" Name="DatabaseRefresh" Margin="0,0,0,0" gwx:GwxProperties.Description="Icon, Database, Refresh, Network, Connectivity" gwx:GwxProperties.ShowDescriptionInToolTip="False" gwx:GwxProperties.Title="Database - Refresh">
          <Path.Data>
            <PathGeometry FillRule="EvenOdd" Figures="M662.777734139904,273.846589028541L666.742874263147,273.846589028541C666.518635921237,274.685167181965 666.389267348576,275.592840629996 666.389267348576,276.547625933561 666.389267348576,277.194618910068 666.451795351908,277.819625935291 666.559602603578,278.416366475246L662.777734139904,278.416366475246C662.42628346522,278.416366475246,662.141673080737,278.001789055127,662.141672917392,277.489848599027L662.141672917392,274.776248427856C662.141673080737,274.261167076712,662.42628346522,273.846589028541,662.777734139904,273.846589028541z M671.560494883293,271.008947055111C671.601724135261,271.007376921617,671.643223286386,271.007376921617,671.68526202025,271.008947055111L671.687418195467,271.008947055111 671.691729683595,271.008947055111C672.219902716471,271.015228531173,672.720051076505,271.178542512422,673.174927086573,271.47062345567L673.190017295027,271.48318577974C674.533086806713,272.353147133423 675.464396914224,274.322337279514 675.449306059048,276.599311901994 675.427747971674,279.658309097442 673.70956799837,282.114300920288 671.609808822231,282.082895110111 669.971393319506,282.057770147939 668.587363808285,280.525130184132 668.069969280157,278.402047799845L669.430285606661,278.056575723188C669.811863947198,279.268868886536 670.646162122592,280.116845231011 671.622743502196,280.132548764154 672.970124717583,280.151391936233 674.071743780022,278.574783838174 674.084678459986,276.611874854119 674.099769530742,274.652106451081 673.017553027184,273.044091286738 671.670171811797,273.025247172578 671.555913496006,273.025247172578 671.443811355431,273.037810124703 671.333865605643,273.056653924837L671.331709430433,273.044091286738C670.969533648776,273.113185325238,670.633227442628,273.298484629718,670.340036980074,273.578002306814L670.807847885687,274.221836802782C670.835873636402,274.259524717077 670.846652141156,274.319197012522 670.831561070398,274.369447250887 670.818626390435,274.422838384299 670.786289798312,274.457385717574 670.747484896115,274.46052661262L669.611373066337,274.548464451253 668.602454232314,274.626980860859 668.59598700012,274.626980860859C668.567961249399,274.626980860859 668.544247417959,274.608137060726 668.524844859079,274.579871517537 668.505442731345,274.548464451253 668.49681953951,274.50763595594 668.503286987279,274.463666879611L668.664972750374,273.154013820549 668.897800007782,271.30102799836C668.904267455552,271.244496283931 668.932293206267,271.200526893574 668.968942148822,271.191105150521 669.007746404291,271.178542512422 669.046551090912,271.200526893574 669.06810896271,271.247636864949L669.441064111414,272.045363285085C669.958458639536,271.502029893902 670.572864237487,271.150276341182 671.23900984874,271.043494074361 671.247633040573,271.040353493342 671.256256232409,271.040353493342 671.264879424244,271.040353493342 671.323086238598,271.030931750291 671.379137524459,271.024650274228 671.437344338814,271.018369112191 671.478304122771,271.013658397679 671.519264553455,271.010517188606 671.560494883293,271.008947055111z M662.777600311308,268.074824460726L671.693373654021,268.074824460726C672.044746139866,268.074824460726,672.331438327507,268.4894166401,672.331438327507,269.00445559764L672.331438327507,269.258869980408C672.051218761424,269.189784106602 671.764500489275,269.145848003077 671.471335464508,269.145848317103 669.647661784061,269.145848003077 668.054632023434,270.546582622056 667.157873319495,272.644540986251L662.777600311308,272.644540986251C662.426228062598,272.644540986251,662.141667253691,272.229948806879,662.141667280668,271.718053256598L662.141667280668,269.00445559764C662.141667253691,268.4894166401,662.426228062598,268.074824460726,662.777600311308,268.074824460726z M664.017090395024,263.6369564412C663.618294708688,263.6369564412 663.292791194737,264.107735627892 663.292791194737,264.688363520722 663.292791194737,265.268991382148 663.618294708688,265.742909297102 664.017090395024,265.742909297102 664.415885865782,265.742909297102 664.739233678786,265.268991382148 664.739233678786,264.688363520722 664.739233678786,264.107735627892 664.415885865782,263.6369564412 664.017090395024,263.6369564412z M662.777590438001,262.403514521746L671.693366971214,262.403514521746C672.044737948038,262.403514521746,672.331439836527,262.820938813711,672.331439836527,263.332519049783L672.331439836527,266.047346562906C672.331439836527,266.558926830383,672.044737948038,266.973212519696,671.693366971214,266.973212519696L662.777590438001,266.973212519696C662.426219137813,266.973212519696,662.141673078597,266.558926830383,662.141672917392,266.047346562906L662.141672917392,263.332519049783C662.141673078597,262.820938813711,662.426219137813,262.403514521746,662.777590438001,262.403514521746z" />
          </Path.Data>
        </Path>
      </Canvas>
    </Canvas>
  </Canvas>
</Canvas>